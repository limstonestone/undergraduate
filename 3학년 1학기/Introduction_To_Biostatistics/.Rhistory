data(golub, package="multtest")
data(golub, package="multtest")
golubFactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
golubFactor
golub.cl
gdf5 = grep("Gdf5", golub.gnames[, 2], ignore.case=TRUE)
gdf5
x = golub[gdf5, ]
x
cutoff = 0.1
pred = ifelse(x < cutoff, "ALL", "AML")
pred
x
table(pred, golubFactor)
chisq.test(table(pred, golubFactor))
cutoff = seq(min(x), max(x), 0.01)
pval = 0
for (i in 1:length(cutoff)) {
pred = ifelse(x < cutoff[i], "ALL", "AML")
pval[i] = chisq.test(table(pred, golubFactor))$p.val
}
plot(cutoff, pval, type="p", pch=20, ylab="pvalues")
cutoff[pval < 0.05]
boxplot(x ~ golubFactor, cex.lab=1.5, main=NULL,
xlab="Leukemia subtype", col=c("lightblue", "orange"))
plot(cutoff, pval, type="p", pch=20, ylab="pvalues")
cutoff[pval < 0.05]
boxplot(x ~ golubFactor, cex.lab=1.5, main=NULL,
xlab="Leukemia subtype", col=c("lightblue", "orange"))
ccnd3 = grep("CCND3", golub.gnames[,2], ignore.case=TRUE)
x2 = golub[ccnd3, ]
x2
cutoff = seq(min(x2), max(x2), 0.01)
ccnd3 = grep("CCND3", golub.gnames[,2], ignore.case=TRUE)
x2 = golub[ccnd3, ]
cutoff = seq(min(x2), max(x2), 0.01)
pval2 = 0
for(i in 1:length(cutoff)) {
pred2 = ifelse(x2 < cutoff[i[, "ALL", "AML"]])
pval2[i] = chisq.test(table(pred2, golubFactor))$p.val
}
for(i in 1:length(cutoff)) {
pred2 = ifelse(x2 < cutoff[i], "ALL", "AML")
pval2[i] = chisq.test(table(pred2, golubFactor))$p.val
}
plot(cutoff, pval2, type="p", pch=20, ylab="pvalues")
cutoff[pval2 < 0.05]
boxplot(x2 ~ golubFactor, cex.lab=1.5, main=NULL,
xlab="Leukemia subtype", col=c("lightblue", "orange"))
abline(h=cutoff[pval2 < 0.05], lty=2, col="gray")
# Fisher's Exact Test
## 샘플사이즈가 작을 때의 독립성검정
## Bioinformatics 에서 자주 사용
## based on odds ratio(OR) = (n11*n22) / (n12*n21)
## if OR=1 -> independent
data = matrix(c(300, 500, 3000, 7000), 2, byrow=TRUE)
fisher.test(data)
data
# Histogram and Q-Q plot
## 정규성 검정의 시각화
data(golub, package = "multtest")
golubFactor <- factor(golub.cl, levels=0:1, labels=c("ALL","AML"))
ccnd3 <- grep("CCND3", golub.gnames[ ,2], ignore.case=TRUE)
hist(golub[ccnd3, golubFactor=="ALL"], cex.lab=1.5, col="orange",
nclass=20, main=NULL, xlab="CCND3 (Cyclin D3) Expression")
qqnorm(golub[ccnd3, golubFactor=="ALL"], pch=19, cex.lab=1.5,
col="red", main=NULL)
qqline(golub[ccnd3, golubFactor=="ALL"])
# Normality Tests
## Shapiro-Wilk test is Qlinearity test based on Q-Q plot
## H0 : normality exists
shapiro.test(golub[ccnd3, golubFactor=="ALL"])
install.packages("nortest")
library(nortest)
ad.test(golub[ccnd3, golubFactor="ALL"])
ad.test(golub[ccnd3, golubFactor=="ALL"])
# Outliers Test
## Data can be contaminated by outliers
## Then, Our test may not be reasonable
## Outlier can be tested by Grubbs test
install.packages("outliers")
library(outliers)
grubbs.test(golub[ccnd3, golubFactor=="ALL"])
# Non-Parametric Tests
## If sample size is not large -> they losse normality (example : t-test)
## So tests have to be available with no specific distributional assumptions
## Wilcoxon signed rank test is an example
x = c(6003, 6304, 6478, 6245, 6134, 6204, 6150)
wilcox.test(x, mu=6000)
nkr <- grep("Nkr", golub.gnames[, 2], ignore.case=TRUE)
nkr = grep("Nkr", golub.gnames[, 2], ignore.case=TRUE)
shapiro.test(golub[nkr, golubFactor=="ALL"])
shapiro.test(golub[nkr, golubFactor=="AML"])
par(mfrow=c(1,2))
qqnorm(golub[nkr, golubFactor=="ALL"], col="red")
qqline(golub[nkr, golubFactor=="ALL"])
qqnorm(golub[nkr, golubFactor=="AML"], col="red")
qqline(golub[nkr, golubFactor=="AML"])
grubbs.test(golub[nkr, golubFactor=="ALL"])
wilcox.test(golub[nkr, golubFactor=="ALL"], mu=0)
# Wilcoxon Rank Sum Test
## data normally distributed & equal variance -> t-test good!
## But not normal? -> no guarantee
## So no specific distributional assumptions need to be made
## two-sample Wilcoxon rank-sum test is an example (wildely applied in Bioninformatics)
igf = grep("IGFBP5", golub.gnames[, 2], ignore.case=TRUE)
shapiro.test(golub[igf, golubFactor=="ALL"])
shapiro.test(golub[igf, golubFactor=="AML"])
## ALL & AML has no noramlity
wilcox.test(golub[igf, ] ~ golubFactor)
# Applications to Multiple Genes
dim(golub)
fun = function(t) shapiro.test(t)$p.value
all = apply(golub[, golubFactor=="ALL"], 1, fun)
aml = apply(golub[, golubFactor=="AML"], 1, fun)
sum(all > 0.05) / nrow(golub)
sum(aml > 0.05) / nrow(golub)
pva.t = function(t) t.test(t ~ golubFactor)$p.value
pval.t = function(t) t.test(t ~ golubFactor)$p.value
pval.w = function(t) wilcox.test(t ~ golubFactor)$p.value
pt = apply(golub, 1, pval.t)
pw = apply(golub, 1, pval.w)
pval = data.frame(cbind(pt, pw))
pval
pval <- data.frame(cbind(pt, pw))
pval[pt < 0.05 & pw >= 0.05 ,]
pval[pw < 0.05 & pt >= 0.05, ]
dim(pval[(pt < 0.05 & pw >= 0.05) | (pw < 0.05 & pt >= 0.05), ])
