tab
tab = rf$test$confusion[1:2, 1:2]
sensitivity = tab[2, 2] / sum(tab[2, ])
specificity = tab[1, 1] / sum(tab[1, ])
class.error.rate = (tab[1,2] + tab[2, 1]) / (tab[2,2] + tab[1,2] + tab[1,1] + tab[2,1])
sensitivity
specificity
class.error.rate
tab
1 - sum(diag(tab)) / sum(tab)
class.error.rate = 1 - sum(diag(tab)) / sum(tab)
class.error.rate
tab = table(test_y, y.pred6)
class.error.rate = 1 - sum(diag(tab)) / sum(tab)
class.error.rate
for (i in 1:3){
sprintf("%s. : %s.", genes.Q3[i], get.acu4(genes.Q3[i]))
}
get.auc4 = function(a){
train.data4 = data.frame(train_x[, a], train_y)
colnames(train.data4) = c("x", "y")
tree4 = rpart(y ~ x, train.data4)
test.data4 = data.frame(test_x[, a], test_y)
colnames(test.data4) = c("x", "y")
tree4 = rpart(y ~ x, train.data4)
yprob4 = predict(tree4, test.data4, type="prob")[,1]
pred4 = prediction(yprob4, test_y)
auc4 = as.numeric(performance(pred4, "auc")@y.values)
auc4 = max(auc4, 1-auc4)
auc4
}
for (i in 1:3){
sprintf("%s. : %s.", genes.Q3[i], get.acu4(genes.Q3[i]))
}
colnames(test.data4) = c("x", "y")
get.auc4 = function(a){
train.data4 = data.frame(train_x[, a], train_y)
colnames(train.data4) = c("x", "y")
tree4 = rpart(y ~ x, train.data4)
test.data4 = data.frame(test_x[, a], test_y)
colnames(test.data4) = c("x", "y")
tree4 = rpart(y ~ x, train.data4)
yprob4 = predict(tree4, test.data4, type="prob")[,1]
pred4 = prediction(yprob4, test_y)
auc4 = as.numeric(performance(pred4, "auc")@y.values)
auc4 = max(auc4, 1-auc4)
auc4}
rm(list=ls())
library(ALL)
data(ALL)
x = t(exprs(ALL))
x = x[, -c(3067, 5064, 5849, 7106, 8064, 8321, 8399, 9407)]
B = ALL$BT %in% c("B", "B1", "B2", "B3", "B4")
y = factor(B, labels=c("T-Cell", "B-cell"))
train = ALL$BT %in% c("B1", "B2", "B3", "T1", "T2", "T3")
test = ALL$BT %in% c("B", "B4", "T", "T4")
train_x = x[train, ]
test_x = x[test, ]
train_y = y[train]
test_y = y[test]
# Q1)
## install.packages("ROCR")
library(ROCR)
for (i in 1:ncol(x)){
train.data1 = data.frame(train_x[, i], train_y)
colnames(train.data1) = c("x", "y")
log1 = glm(y ~ x, train.data1, family=binomial)
yprob1 = predict(log1, type="response")
pred1 = prediction(yprob1, train_y)
auc1[i] = as.numeric(performance(pred1, "auc")@y.values)
auc1[i] = max(auc1[i], 1-auc1[i])
}
auc1 = 0
for (i in 1:ncol(x)){
train.data1 = data.frame(train_x[, i], train_y)
colnames(train.data1) = c("x", "y")
log1 = glm(y ~ x, train.data1, family=binomial)
yprob1 = predict(log1, type="response")
pred1 = prediction(yprob1, train_y)
auc1[i] = as.numeric(performance(pred1, "auc")@y.values)
auc1[i] = max(auc1[i], 1-auc1[i])
}
max(auc1)
ind1 = which(auc1==max(auc1), arr.ind=TRUE)
colnames(train_x[, ind1])
# Q2)
genes.Q1 = c("33238_at", "37344_at")
get.auc2 = function(a){
train.data2 = data.frame(train_x[, a], train_y)
colnames(train.data2) = c("x", "y")
log2 = glm(y ~ x, train.data2, family=binomial)
test.data2 = data.frame(test_x[, a], test_y)
colnames(test.data2) = c("x", "y")
yprob2 = predict(log2, test.data2, type="response")
pred2 = prediction(yprob2, test_y)
auc2 = as.numeric(performance(pred2, "auc")@y.values)
auc2 = max(auc2, 1-auc2)
auc2
}
genes.Q1[1]
get.auc2(genes.Q1[1])
genes.Q1[2]
get.auc2(genes.Q1[2])
for (i in 1:2){
sprintf("%s : %s", genes.Q1[i], get.acu2(genes.Q1[i]))
}
for (i in 1:2){
sprintf("%s : %s", genes.Q1[i], get.auc2(genes.Q1[i]))
}
genes.Q1[1]
get.auc2(genes.Q1[1])
genes.Q1[2]
get.auc2(genes.Q1[2])
genes.Q1[1], get.auc2(genes.Q1[1])
genes.Q1[1] ; get.auc2(genes.Q1[1])
# Q3)
## install.packages(c("rpart", "rpart.plot"))
library(rpart)
# Q7)
## install.packages("randomForest")
library(randomForest)
set.seed(123)
rf = randomForest(x=train_x, y=train_y, xtest=test_x, ytest=test_y, ntree=1000, mtry=10)
tab = rf$test$confusion[1:2, 1:2]
tab
rf = randomForest(x=train_x, y=train_y, xtest=test_x, ytest=test_y, ntree=1000, mtry=10)
tab = rf$test$confusion[1:2, 1:2]
tab
sensitivity = tab[2, 2] / sum(tab[2, ])
specificity = tab[1, 1] / sum(tab[1, ])
class.error.rate = 1 - sum(diag(tab)) / sum(tab)
sensitivity
specificity
class.error.rate
rm(list=ls())
library(ALL)
data(ALL)
x = t(exprs(ALL))
x = x[, -c(3067, 5064, 5849, 7106, 8064, 8321, 8399, 9407)]
B = ALL$BT %in% c("B", "B1", "B2", "B3", "B4")
y = factor(B, labels=c("T-Cell", "B-cell"))
train = ALL$BT %in% c("B1", "B2", "B3", "T1", "T2", "T3")
test = ALL$BT %in% c("B", "B4", "T", "T4")
train_x = x[train, ]
test_x = x[test, ]
train_y = y[train]
test_y = y[test]
rm(list=ls())
library(ALL)
data(ALL)
x = t(exprs(ALL))
x = x[, -c(3067, 5064, 5849, 7106, 8064, 8321, 8399, 9407)]
B = ALL$BT %in% c("B", "B1", "B2", "B3", "B4")
y = factor(B, labels=c("T-Cell", "B-cell"))
train = ALL$BT %in% c("B1", "B2", "B3", "T1", "T2", "T3")
test = ALL$BT %in% c("B", "B4", "T", "T4")
train_x = x[train, ] ; test_x = x[test, ]
train_y = y[train] ; test_y = y[test]
# Q1)
## install.packages("ROCR")
library(ROCR)
auc1 = 0
for (i in 1:ncol(x)){
train.data1 = data.frame(train_x[, i], train_y)
colnames(train.data1) = c("x", "y")
log1 = glm(y ~ x, train.data1, family=binomial)
yprob1 = predict(log1, type="response")
pred1 = prediction(yprob1, train_y)
auc1[i] = as.numeric(performance(pred1, "auc")@y.values)
auc1[i] = max(auc1[i], 1-auc1[i])
}
max(auc1)
ind1 = which(auc1==max(auc1), arr.ind=TRUE)
colnames(train_x[, ind1])
# answer1)
## gene that has the largest AUC : "33238_at" , "37344_at"
## largest AUC : 0.9985207
genes.Q1 = c("33238_at", "37344_at")
get.auc2 = function(a){
train.data2 = data.frame(train_x[, a], train_y)
colnames(train.data2) = c("x", "y")
log2 = glm(y ~ x, train.data2, family=binomial)
test.data2 = data.frame(test_x[, a], test_y)
colnames(test.data2) = c("x", "y")
yprob2 = predict(log2, test.data2, type="response")
pred2 = prediction(yprob2, test_y)
auc2 = as.numeric(performance(pred2, "auc")@y.values)
auc2 = max(auc2, 1-auc2)
auc2
}
genes.Q1[1] ; get.auc2(genes.Q1[1])
genes.Q1[2] ; get.auc2(genes.Q1[2])
# answer2)
## numerical value of AUC for test : 1 ("33238_at")
## numerical value of AUC for test : 0.9663866 ("37344_at")
# Q3)
## install.packages(c("rpart", "rpart.plot"))
library(rpart)
library(rpart.plot)
auc3 = 0
for (i in 1:ncol(x)){
train.data3 = data.frame(train_x[, i], train_y)
colnames(train.data3) = c("x", "y")
tree3 = rpart(y ~ x, train.data3)
yprob3 = predict(tree3, type="prob")[,1]
pred3 = prediction(yprob3, train_y)
auc3[i] = as.numeric(performance(pred3, "auc")@y.values)
auc3[i] = max(auc3[i], 1-auc3[i])
}
max(auc3)
ind3 = which(auc3==max(auc3), arr.ind=TRUE)
colnames(train_x[, ind3])
# answer3)
## gene that has the largest AUC : "2059_s_at", "33238_at", "38147_at"
## largest AUC : 0.9935897
# Q4
genes.Q3 = c("2059_s_at", "33238_at", "38147_at")
auc4 = 0
get.auc4 = function(a){
train.data4 = data.frame(train_x[, a], train_y)
colnames(train.data4) = c("x", "y")
tree4 = rpart(y ~ x, train.data4)
test.data4 = data.frame(test_x[, a], test_y)
colnames(test.data4) = c("x", "y")
tree4 = rpart(y ~ x, train.data4)
yprob4 = predict(tree4, test.data4, type="prob")[,1]
pred4 = prediction(yprob4, test_y)
auc4 = as.numeric(performance(pred4, "auc")@y.values)
auc4 = max(auc4, 1-auc4)
auc4}
genes.Q3[1] ; get.auc4(genes.Q3[1])
genes.Q3[2] ; get.auc4(genes.Q3[2])
genes.Q3[3] ; get.auc4(genes.Q3[3])
# answer4)
## numerical value of AUC for test : 0.9705882 ("2059_s_at")
## numerical value of AUC for test : 0.9285714 ("33238_at")
## numerical value of AUC for test : 1 ("38147_at")
# Q5)
# train
train.data5 = data.frame(train_x, train_y)
colnames(train.data5) = c(colnames(train_x), "y")
tree5 = rpart(y ~ ., train.data5)
yprob5 = predict(tree5, type="prob")[,1]
pred5 = prediction(yprob5, train_y)
train.auc5 = as.numeric(performance(pred5, "auc")@y.values)
train.auc5 = max(train.auc5, 1-train.auc5)
# test
test.data5 = data.frame(test_x, test_y)
colnames(test.data5) = c(colnames(test_x), "y")
yprob5 = predict(tree5, test.data5, type="prob")[,1]
pred5 = prediction(yprob5, test_y)
test.auc5 = as.numeric(performance(pred5, "auc")@y.values)
test.auc5 = max(test.auc5, 1-test.auc5)
train.auc5
test.auc5
# answer5)
## AUC of the training set : 0.9935897
## AUC of the test set : 0.9705882
# Q6)
y.pred6 = predict(tree5, test.data5, type="class")
tab = table(test_y, y.pred6)
sensitivity = tab[2, 2] / sum(tab[2, ])
specificity = tab[1, 1] / sum(tab[1, ])
class.error.rate = 1 - sum(diag(tab)) / sum(tab)
sensitivity
specificity
class.error.rate
## answer6)
## sensitivity : 0.9411765
## specificity : 1
## classification error rate : 0.04166667
# Q7)
## install.packages("randomForest")
library(randomForest)
set.seed(123)
rf = randomForest(x=train_x, y=train_y, xtest=test_x, ytest=test_y, ntree=1000, mtry=10)
tab = rf$test$confusion[1:2, 1:2]
sensitivity = tab[2, 2] / sum(tab[2, ])
specificity = tab[1, 1] / sum(tab[1, ])
class.error.rate = 1 - sum(diag(tab)) / sum(tab)
sensitivity
specificity
class.error.rate
## answer7)
## sensitivity : 1
## specificity : 0.7142857
## classification error rate : 0.08333333
set.seed(456)
rf = randomForest(x=train_x, y=train_y, xtest=test_x, ytest=test_y, ntree=1000, mtry=10)
tab = rf$test$confusion[1:2, 1:2]
sensitivity = tab[2, 2] / sum(tab[2, ])
specificity = tab[1, 1] / sum(tab[1, ])
class.error.rate = 1 - sum(diag(tab)) / sum(tab)
sensitivity
specificity
class.error.rate
## answer7)
## sensitivity : 1
## specificity : 0.7142857
## classification error rate : 0.08333333
# Setting
rm(list=ls())
library(ALL)
data(ALL)
x = t(exprs(ALL))
x = x[, -c(3067, 5064, 5849, 7106, 8064, 8321, 8399, 9407)]
B = ALL$BT %in% c("B", "B1", "B2", "B3", "B4")
y = factor(B, labels=c("T-Cell", "B-cell"))
train = ALL$BT %in% c("B1", "B2", "B3", "T1", "T2", "T3")
test = ALL$BT %in% c("B", "B4", "T", "T4")
train_x = x[train, ] ; test_x = x[test, ]
train_y = y[train] ; test_y = y[test]
# Q1)
## install.packages("ROCR")
library(ROCR)
auc1 = 0
for (i in 1:ncol(x)){
train.data1 = data.frame(train_x[, i], train_y)
colnames(train.data1) = c("x", "y")
log1 = glm(y ~ x, train.data1, family=binomial)
yprob1 = predict(log1, type="response")
pred1 = prediction(yprob1, train_y)
auc1[i] = as.numeric(performance(pred1, "auc")@y.values)
auc1[i] = max(auc1[i], 1-auc1[i])
}
max(auc1)
ind1 = which(auc1==max(auc1), arr.ind=TRUE)
colnames(train_x[, ind1])
# answer1)
## gene that has the largest AUC : "33238_at" , "37344_at"
## largest AUC : 0.9985207
# Q2)
genes.Q1 = c("33238_at", "37344_at")
get.auc2 = function(a){
train.data2 = data.frame(train_x[, a], train_y)
colnames(train.data2) = c("x", "y")
log2 = glm(y ~ x, train.data2, family=binomial)
test.data2 = data.frame(test_x[, a], test_y)
colnames(test.data2) = c("x", "y")
yprob2 = predict(log2, test.data2, type="response")
pred2 = prediction(yprob2, test_y)
auc2 = as.numeric(performance(pred2, "auc")@y.values)
auc2 = max(auc2, 1-auc2)
auc2
}
genes.Q1[1] ; get.auc2(genes.Q1[1])
genes.Q1[2] ; get.auc2(genes.Q1[2])
# answer2)
## numerical value of AUC for test : 1 ("33238_at")
## numerical value of AUC for test : 0.9663866 ("37344_at")
# Q3)
## install.packages(c("rpart", "rpart.plot"))
library(rpart)
library(rpart.plot)
auc3 = 0
for (i in 1:ncol(x)){
train.data3 = data.frame(train_x[, i], train_y)
colnames(train.data3) = c("x", "y")
tree3 = rpart(y ~ x, train.data3)
yprob3 = predict(tree3, type="prob")[,1]
pred3 = prediction(yprob3, train_y)
auc3[i] = as.numeric(performance(pred3, "auc")@y.values)
auc3[i] = max(auc3[i], 1-auc3[i])
}
max(auc3)
ind3 = which(auc3==max(auc3), arr.ind=TRUE)
colnames(train_x[, ind3])
# answer3)
## gene that has the largest AUC : "2059_s_at", "33238_at", "38147_at"
## largest AUC : 0.9935897
# Q4
genes.Q3 = c("2059_s_at", "33238_at", "38147_at")
auc4 = 0
get.auc4 = function(a){
train.data4 = data.frame(train_x[, a], train_y)
colnames(train.data4) = c("x", "y")
tree4 = rpart(y ~ x, train.data4)
test.data4 = data.frame(test_x[, a], test_y)
colnames(test.data4) = c("x", "y")
tree4 = rpart(y ~ x, train.data4)
yprob4 = predict(tree4, test.data4, type="prob")[,1]
pred4 = prediction(yprob4, test_y)
auc4 = as.numeric(performance(pred4, "auc")@y.values)
auc4 = max(auc4, 1-auc4)
auc4}
genes.Q3[1] ; get.auc4(genes.Q3[1])
genes.Q3[2] ; get.auc4(genes.Q3[2])
genes.Q3[3] ; get.auc4(genes.Q3[3])
# answer4)
## numerical value of AUC for test : 0.9705882 ("2059_s_at")
## numerical value of AUC for test : 0.9285714 ("33238_at")
## numerical value of AUC for test : 1 ("38147_at")
# Q5)
# train
train.data5 = data.frame(train_x, train_y)
colnames(train.data5) = c(colnames(train_x), "y")
tree5 = rpart(y ~ ., train.data5)
yprob5 = predict(tree5, type="prob")[,1]
pred5 = prediction(yprob5, train_y)
train.auc5 = as.numeric(performance(pred5, "auc")@y.values)
train.auc5 = max(train.auc5, 1-train.auc5)
# test
test.data5 = data.frame(test_x, test_y)
colnames(test.data5) = c(colnames(test_x), "y")
yprob5 = predict(tree5, test.data5, type="prob")[,1]
pred5 = prediction(yprob5, test_y)
test.auc5 = as.numeric(performance(pred5, "auc")@y.values)
test.auc5 = max(test.auc5, 1-test.auc5)
train.auc5
test.auc5
# answer5)
## AUC of the training set : 0.9935897
## AUC of the test set : 0.9705882
# Q6)
y.pred6 = predict(tree5, test.data5, type="class")
tab = table(test_y, y.pred6)
sensitivity = tab[2, 2] / sum(tab[2, ])
specificity = tab[1, 1] / sum(tab[1, ])
class.error.rate = 1 - sum(diag(tab)) / sum(tab)
sensitivity
specificity
class.error.rate
## answer6)
## sensitivity : 0.9411765
## specificity : 1
## classification error rate : 0.04166667
# Q7)
## install.packages("randomForest")
library(randomForest)
set.seed(456)
rf = randomForest(x=train_x, y=train_y, xtest=test_x, ytest=test_y, ntree=1000, mtry=10)
tab = rf$test$confusion[1:2, 1:2]
sensitivity = tab[2, 2] / sum(tab[2, ])
specificity = tab[1, 1] / sum(tab[1, ])
class.error.rate = 1 - sum(diag(tab)) / sum(tab)
sensitivity
specificity
class.error.rate
## answer7)
## sensitivity : 1
## specificity : 0.7142857
## classification error rate : 0.08333333
# Examples of Support Vector Machine
library(ALL)
data(ALL)
ALLB123 = ALL[, ALL$BT %in% c("B1", "B2", "B3")]
names = featureNames(ALL)
ALLBTnames = ALLB123[names, ]
probData = as.matrix(ecprs(ALLBTnames))
probData = as.matrix(exprs(ALLBTnames))
fun = function(x) anova(lm(x ~ ALLB123$BT))$Pr[1]
anova.pValue = apply(exprs(ALLB123), 1, fun)
ww = anova.pValue < 0.00001
diagnosed = factor(ALLBTnames$BT)
Data = data.frame(t(probeData[ww, ]), y=diagnosed)
probeData = as.matrix(exprs(ALLBTnames))
Data = data.frame(t(probeData[ww, ]), y=diagnosed)
set.seed(123)
train = sample(1:78, 39, replace=FALSE)
test = setdiff(1:78, train)
install.packages("e1071")
## install.packages("e1071")
library(e1071)
svmfit = svm(y ~., data=Data[train, ], kernel="linear")
summary(svmfit)
dim(Data)
pred.tr = predict(svmfit, Data[train, ])
table(pred.tr, Data[train, "y"])
pred.te = predict(svmfit, Data[test, ])
table(pred.te, Data[test, "y"])
mean(pred.te != Data[test, "y"])
fit1 = svm(y ~., data=Data[train, ], cost=0.001, kernel="linear")
fit2 = svm(y ~., data=Data[train, ], cost=0.01, kernel="linear")
fit3 = svm(y ~., data=Data[train, ], cost=0.1, kernel="linear")
fit4 = svm(y ~., data=Data[train, ], cost=10, kernel="linear")
pred.te = predict(fit1, Data[test, ])
table(pred.te, Data[test, "y"])
mean(pred.te != Data[test, "y"])
pred.te = predict(fit2, Data[test, ])
table(pred.te, Data[test, "y"])
mean(pred.te != Data[test, "y"])
pred.te = predict(fit3, Data[test, ])
table(pred.te, Data[test, "y"])
mean(pred.te != Data[test, "y"])
pred.te = predict(fit4, Data[test, ])
table(pred.te, Data[test, "y"])
mean(pred.te != Data[test, "y"])
set.seed(123)
tune.out = tune(svm, y ~., data=Data[train, ],
kernel="linear", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10,1 00)))
tune.out = tune(svm, y ~., data=Data[train, ],
kernel="linear", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune.out)
tune.out$best.model
pred = predict(tune.out$best.model, Data[test, ])
table(pred, Data[test, "y"])
mean(pred != Data[test, "y"])
set.seed(12)
tout = tune(svm, y~., data=Data[train, ], kernel="polynomial",
ranges=list(cost=c(0.1,1,10,100), degree=c(2,3,4)))
pred = predict(tout$best.model, Data[test, ])
table(pred, Data[test, "y"])
tout = tune(svm, y~., data=Data[train, ], kernel="radial",
ranges=list(cost=c(0.1,1,10,100), gamma=c(0.5,1,2,3)))
pred = predict(tout$best.model, Data[test, ])
table(pred, Data[test, "y"])
mean(pred != Data[test, "y"])
tout = tune(svm, y~., data=Data[train, ], kernel="sigmoid",
ranges=list(cost=c(0.1,1,10,100), gamma=c(0.5,1,2,3)))
pred = predict(tout$best.model, Data[test, ])
table(pred, Data[test, "y"])
mean(pred != Data[test, "y"])
