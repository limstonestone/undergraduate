xlab="20 genes with normal random distances")
axis(side=2, at=seq(0, 1.4, .2), col="brown", labels=TRUE, lwd=4)
set.seed(4321)
x = c(rnorm(10, 0, 0.1), rnorm(10, 3, 0.5), rnorm(10, 10, 1.0))
out = hclust(dist(x, method="euclidean"), method="single")
plot(out, lwd=3, col="blue", hang=-1, main=NA, sub=NA,
axes=FALSE, ylab="Distance",
xlab="3 clusters of 10 genes each")
axis(side=2, at=seq(0, 5, 1), col="brown", labels=TRUE, lwd=4)
abline(h=1, lty=2, lwd=2, col="gray")
data(golub, package="multtest")
zyxin = grep("Zyxin", golub.gnames[, 2])
ccnd3 = grep("CCND3", golub.gnames[ , 2])
clusdata = data.frame(golub[ccnd3, ], golub[zyxin, ])
colnames(clusdata) = c("CCND3 Cyclin D3", "Zyxin")
gfactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
gf = as.numeric(gfactor)
plot(clusdata, pch=gf+15, col=gf+1)
legend("topright", legend=c("ALL", "AML"), pch=16:17, col=c(2, 3))
dist.cl = dist(clusdata, method="euclidean")
gcl = hclust(dist.cl, method="single")
plot(gcl, lwd=3, col="blue", hang=-1, main=NA, sub=NA,
axes=FALSE, ylab="Distance",
xlab="Clustering of patients by gene expression")
axis(side=2, at=seq(0,1.2,.2), col="brown", labels=TRUE, lwd=4)
abline(h=0.6, lty=2, lwd=2, col="gray")
sort(rev(gcl$order)[1:9])
?rev
gcl$order[1:9]
rev(gcl$order[1:9])
which(gfactor=="AML")
par(mfrow=c(2,2))
hc1 = hclust(dist.cl, method="single")
plot(hc1, main="Single Linkage", xlab="", sub="", hang=-1)
abline(h=0.6, lty=2, col="blue")
hc2 = hclust(dist.cl, method="complete")
plot(hc2, main="Complete Linkage", xlab="", sub="", hang=-1)
abline(h=3, lty=2, col="orange")
hc3 = hclust(dist.cl, method="average")
plot(hc3, main="Average Linkage", xlab="", sub="", hang=-1)
abline(h=2.0, lty=2, col="green")
hc4 = hclust(dist.cl, method="centroid")
plot(hc4, main="Centroid Linkage", xlab="", sub="", hang=-1)
abline(h=1, lty=2, col="purple")
data(golub, package="multtest")
data(golub, package="multtest")
gFactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
meanALL = apply(golub[ , gFactor=="ALL"], 1, mean)
meanAML = apply(golub[ , gFactor=="AML"], 1, mean)
o = order(abs(meanALL - meanAML), decreasing=TRUE)
DE50 = golub[o[1:50], ]
par(mfrow=c(1,1))
hist(DE50, nclass=50, col="orange") # Top 50 which is far from mean
library(gplots)
heatmap.2(DE50, Rowv=NA, Colv=NA, scale="row", cexRow=0.5,
col=greenred(75), dendrogram="none", key=TRUE,
symkey=FALSE, density.info="none", trace="none")
## Next, we enhance our "Top 50 Genes" heatmap by performing heirarchical clustering on both rows and columns.
heatmap.2(DE50, scale="row", col=greenred(75),
dendrogram="both", key=TRUE, symkey=FALSE,
density.info="none", trace="none", cexRow=0.5)
dev.off()
library(gplots)
heatmap.2(DE50, Rowv=NA, Colv=NA, scale="row", cexRow=0.5,
col=greenred(75), dendrogram="none", key=TRUE,
symkey=FALSE, density.info="none", trace="none")
## Next, we enhance our "Top 50 Genes" heatmap by performing heirarchical clustering on both rows and columns.
heatmap.2(DE50, scale="row", col=greenred(75),
dendrogram="both", key=TRUE, symkey=FALSE,
density.info="none", trace="none", cexRow=0.5)
data(golub, package="multtest")
mcm3 = grep("MCM3", golub.gnames[, 2])
golub.gnames[mcm3, ]
x = golub[mcm3[1], ]
y = golub[mcm3[2], ]
cor(x, y)
plot(x, y, pch=19, col="blue3")
abline(lm(y ~ x)$coef, col=2, lty=2, lwd=2)
cor.test(x, y) # H0 : 상관계수=0 을 기각
B = 10000
per.cor = NULL
for (i in 1:B) {
index1 =  sample(1:length(x))
index2 = sample(1:length(y))
per.cor[i] = cor(x[index1], y[index2])
}
hist(per.cor, nclass=50, col="orange")
c0 = cor(x, y)
abline(v=c(-c0, c0), lty=2, lwd=2, col="blue")
c0
hist(per.cor, nclass=50, col="orange")
c0 = cor(x, y)
abline(v=c(-c0, c0), lty=2, lwd=2, col="blue")
cor.test(x, y)
(sum(abs(per.cor) > abs(c0)) + 1) / (B + 1) # p-value
B = 10000
boot.cor = rep(0, B)
data = cbind(x, y)
set.seed(1)
for (i in 1:B) {
index = sample(1:nrow(data), replace=TRUE)
dat.star = data[index, ]
boot.cor[i] = cor(dat.star)[1, 2]
}
hist(boot.cor, nclass=50, col="orange")
CI = quantile(boot.cor, c(0.025, 0.975))
abline(v=CI, lty=2, lwd=2, col="blue")
mean(boot.cor)
CI
y = golub.cl
y
corgol = apply(golub, 1, function(x) cor(x, y))
corgol
o = order(abs(corgol), decreasing=TRUE)
top = 10
ot = o[1:top]
data.frame(genes=golub.gnames[ot, 3], cor=corgol[ot])
par(mfrow=c(1, 2))
par(mfrow=c(1, 2))
hist(corgol, nclass=20, col="orange", xlab="", main="PCC")
hist(fstat, nclass=20, col="lightblue", xlab="",
main="F test statistic")
par(mfrow=c(1, 2))
fun = function(x) summary(lm(x ~ y))$fstat[1] # overall F-test : H0: beta_1 = 0, F-statistic high => reject H0
fstat = apply(golub, 1, fun)
o2 = order(fstat, decreasing=TRUE)
top = 10
ot2 = o2[1:top]
data.frame(genes=golub.gnames[ot2, 3], f.stat=fstat[ot2])
par(mfrow=c(1, 2))
hist(fstat, nclass=20, col="lightblue", xlab="",
main="F test statistic")
par(mfrow=c(1, 2))
hist(corgol, nclass=20, col="orange", xlab="", main="PCC")
hist(fstat, nclass=20, col="lightblue", xlab="",
main="F test statistic")
V1 = c(1.63, -0.40, 0.93, -1.38, -0.17, -0.61)
V2 = c(1.22, 0.79, 0.97, -1.08, -0.96, -0.93)
par(mfrow=c(1,1))
plot(V1, V2, xlim=c(-2, 2), ylim=c(-2, 2), col="red", pch=15)
Z = matrix(c(V1, V2), nrow=6, byrow=FALSE)
cor(Z)
Z
e = eigen(cor(Z))
e
Z = %*% e$vec[, 1]
Z %*% e$vec[, 1]
Score = Z %*% e$vec
colnames(Score) = c("PC1", "PC2")
Score
pca = princomp(Z, cor=TRUE)
pca$scores
pca$loadings
pvar = pca$sdev^2
pvar
pve = pvar/sum(pvar)
pve
pca
data(golub, package="multtest")
cgolub = cor(golub)
dim(cgolub)
e = eigen(cgolub)
dim(e$vector)
e$values
plot(e$values, type="b", pch=19, col=2, ylab="eigenvalues",
xlab="the number of components")
n = ncol(golub)
p = nrow(golub)
B = 10000
set.seed(10101)
eval = matrix(0, B, n)
for (i in 1:B) {
index = sample(1:p, replace=TRUE)
boot = golub[index,]
eval[i, ] = eigen(cor(boot))$values
}
CI = apply(eval, 2, function(t) quantile(t, c(0.025, 0.975)))
t(CI)
golubFactor = factor(golub.cl)
o1 = grep("CD", golub.gnames[ ,2])
o2 = grep("Op", golub.gnames[ ,2])
o3 = grep("MCM", golub.gnames[ ,2])
o = c(o1, o2, o3)
length(o)
fun = function(x) t.test(x ~ golubFactor)$p.value
pt = apply(golub[o, ], 1, fun)
oo = o[pt < 0.01]
length(oo)
pca = princomp(golub)
leu = data.frame(pca$scores[oo, 1:2], row.names=oo)
plot(leu, xlim=c(-10, 15), ylim=c(-10, 10), pch=19, cex=1.2,
xlab="Principal Component 1", ylab="Principal Component 2",
col="darkgreen")
text(x=leu[, 1], y=leu[ ,2], labels=rownames(leu), pos=1,
col="blue", cex=0.6)
abline(h=0, col="grey", lty=2)
abline(v=0, col="grey", lty=2)
fac = rep(1, length(oo))
fac[oo %in% o2] = 2
fac[oo %in% o3] = 3
text(x = leu[, 1], y=leu[, 2], labels=fac, pos=3, col="red")
leu
dist = dist(leu, method="euclidean")
cl = hclust(dist, method="single")
x11()
plot(cl, lwd=3, col="blue", col.axis = "brown", ylab="Distance",
xlab="Clustering of the expression of genes",
hang=-1, main=NA, sub=NA, axes=FALSE)
axis(side=2, at=seq(0,5,1), col="brown", labels=TRUE, lwd = 4)
x11()
plot(cl, lwd=3, col="blue", col.axis = "brown", ylab="Distance",
xlab="Clustering of the expression of genes",
hang=-1, main=NA, sub=NA, axes=FALSE)
axis(side=2, at=seq(0,5,1), col="brown", labels=TRUE, lwd = 4)
a = as.integer(rownames(leu)[cl$order])
golub.gnames[a, 2]
A = 100
B = 200
a = 20
b = 40
(a-b)/A
(b-a)/A * 100
a = 30
(b-a)/A * 100
data(golub, package="multtest")
Labels = factor(golub.cl, levels=0:1, labels=c("ALL", "notALL"))
ccnd3 = grep("CCND3", golub.gnames[,2], ignore.case=TRUE)
decision = golub[ccnd3, ] > 1.27
decision
c(sum(decision), ncol(golub))
Pred = factor(decision, levels=c("TRUE", "FALSE"), labels=c("ALL", "notALL"))
table(Labels, Pred)
tab = table(Labels, Pred)
sensitivity = tab[1, 1] / sum(tab[1, ])
sensitivity
specificity = tab[2, 2] / sum(tab[2, ])
PV.positive = tab[1, 1] / sum(tab[ ,1])
tab[, 1]
PV.negative = tab[2, 2] / sum(tab[, 2])
c(sensitivity, specificity, PV.positive, PV.negative)
decision = golub[ccnd3, ] > 2.18
Pred = factor(decision, levels=c("TRUE", "FALSE"), labels=c("ALL", "notALL"))
tab = table(Labels, Pred)
sensitivity = tab[1, 1] / sum(tab[1, ])
specificity = tab[2, 2] / sum(tab[2, ])
PV.positive = tab[1, 1] / sum(tab[ ,1])
PV.negative = tab[2, 2] / sum(tab[, 2])
c(sensitivity, specificity, PV.positive, PV.negative)
decision = golub[ccnd3, ] > 0.4
Pred = factor(decision, levels=c("TRUE", "FALSE"), labels=c("ALL", "notALL"))
tab = table(Labels, Pred)
sensitivity = tab[1, 1] / sum(tab[1, ])
specificity = tab[2, 2] / sum(tab[2, ])
PV.positive = tab[1, 1] / sum(tab[ ,1])
PV.negative = tab[2, 2] / sum(tab[, 2])
c(sensitivity, specificity, PV.positive, PV.negative) # bad cutoff
sort(golub[ccnd3, Labels=="ALL"], decreasing=TRUE)
sort(golub[ccnd3, Labels!="ALL"], decreasing=TRUE)
# Example of ROC Curve
install.packages("ROCR")
library(ROCR)
true = factor(golub.cl, levels=0:1, labels=c("TRUE", "FALSE"))
predccnd3 = prediction(golub[ccnd3, ], true)
perfccnd3 = performance(predccnd3, "tpr", "fpr")
plot(perfccnd3, lwd=4, col="blue")
perfccnd3
predccn3
predccnd3
slotNames(perfccnd3)
list(perfccnd3@x.name, perfccnd3@x.values)
perfccnd3@x.name
list(perfccnd3@y.name, perfccnd3@y.values) # False positive rate
list(perfccnd3@alpha.name, perfccnd3@alpha.values)
performance(predccnd3, "auc")@y.values
gdf5 = grep("GDF5", golub.gnames[, 2], ignore.case=TRUE)
predgdf5 = prediction(golub[gdf5, ], true)
perfgdf5 = performance(predgdf5, "tpr", "fpr")
plot(perfgdfr5, lwd=4, col="magenta")
plot(perfgdf5, lwd=4, col="magenta")
## We can improve Gdf5-classifier by reversing the classification labels
true2 = factor(golub.cl, levels=0:1, labels=c("FALSE", "TRUE"))
predgdf5 = prediction(golub[gdf5, ], true2)
perfgdf5 = performance(predgdf5, "tpr", "fpr")
performance(predgdf5, "auc")@y.values
plot(perfgdf5, lwd=4, col="magenta")
plot(perfccnd3, lwd=4, col="blue", add=TRUE)
## Still low performance, because ccnd3 is a biomarker for ALL, but Gdf5 is not.
data(golub, package="multtest")
# Example of Logistic Regression
data(golub, package="multtest")
Factor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
ccnd3 = grep("CCND3", golub.gnames[, 2], ignore.case=TRUE)
g = glm(Factor ~ golub[ccnd3, ], family=binomial)
summary(g)
summary(g)
summary(g)$coef
pchisq(deviance(g), df.residual(g), lower=FALSE) # not reject H0 => model well fitted!
## predictive accuracy
eta = cbind(1, golub[ccnd3, ]) %*% g$coef
exp(eta) / (1 + exp(eta))
eta
exp(eta) / (1 + exp(eta))
predict(g, type="response")
x = golub[ccnd3, ]
y = 1 - golub.cl
u = order(x)
plot(x, y, pch="|", col="orange", ylim=c(-0.1,1.1),
xlab="Gene expression values", ylab="Probability of ALL")
abline(h=c(0, 1), lty=2)
points(x[u], 1-g$fit[u], col="blue", lwd=2, pch=20)
pred = predict(g, type="response") < 0.5 # 0.5 ; threshold, 이 값이 변화하는 것에 따른 sensitivity, specifity 를 관찰하는게 ROC curve
est = factor(pred, levels=c(TRUE, FALSE), labels=c("ALL", "not ALL"))
table(est, Factor)
library(ROCR)
true = factor(golub.cl, levels=0:1, labels=c("FALSE", "TRUE"))
yprob = predict(g, type="response")
pred = prediction(yprob, true)
perf = performance(pred, "tpr", "fpr")
plot(perf, lwd=2, col="blue")
performance(pred, "auc")@y.values
# Example of Classification Trees
install.packages(c("rpart", "rpart.plot"))
library(rpart)
library(rpart.plot)
n = 10
factor = factor(c(rep(1, n), rep(2, n), rep(3, n)))
levels(factor) = c("ALL1", "ALL2", "AML")
factor
set.seed(123)
sigma = 0.5
geneA = c(rnorm(n, 0, sigma), rnorm(n, 2, sigma), rnorm(n, 4, sigma))
tapply(geneA, factor, range)
boxplot(geneA ~ factor, cex.lab=1.5, main=NULL, boxwex=0.3,
col=c("lightblue", "orange", "lightgreen"),
xlab="Type of leukemia", ylab="Gene expression")
factor
geneA
data = data.frame(factor, geneA)
rpartFit = rpart(factor ~ geneA, method="class", data=data)
prp(rpartFit, branch.lwd=4, branch.col="darkgreen", extra=101)
rpartFit
summary(rpartFit)
rpartFit # can check estimated splits
summary(rpartFit) # can check concrete
## Example : Gene selection
sigma = 0.5
factor = factor(c(rep(1, 10), rep(2, 10), rep(3, 10)))
levels(factor) = c("ALL1", "ALL2", "AML")
set.seed(123)
geneA = c(rnorm(20, 0, sigma), rnorm(10, 2, sigma))
geneB = c(rnorm(10, 0, sigma), rnorm(20, 2, sigma))
geneC = c(rnorm(30, 1, sigma))
data = data.frame(factor, geneA, geneB, geneC)
par(mfrow=c(1,3))
boxplot(geneA ~ factor, main="Gene A", boxwex=0.3, ylab="",
col=c("lightblue", "orange", "lightgreen"), xlab="")
boxplot(geneB ~ factor, main="Gene B", boxwex=0.3, ylab="",
col=c("lightblue", "orange", "lightgreen"), xlab="")
boxplot(geneC ~ factor, main="Gene C", boxwex=0.3, ylab="",
col=c("lightblue", "orange", "lightgreen"), xlab="")
tapply(geneA, factor, range)
tapply(geneB, factor, range)
tapply(geneC, factor, range)
rpartFit = rpart(factor ~ geneA + geneB + geneC, method="class", data=data)
prp(rpartFit, branch.lwd=4, branch.col="blue", extra=101)
prp(rpartFit, branch.lwd=4, branch.col="blue", extra=101)
par(mfrow=c(1,1))
prp(rpartFit, branch.lwd=4, branch.col="blue", extra=101)
## Example : Classification by jCCND3 gene expression
data(golub, package="multtest")
golubFactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
ccnd3 = grep("CCND3", golub.gnames[,2], ignore.case=TRUE)
boxplot(golub[ccnd3, ] ~ golubFactor, main="", boxwex=0.3,
col=c("lightblue", "orange"), xlab="Type of patients",
ylab="Cyclin D3 gene expression")
tapply(golub[ccnd3, ], golubFactor, range)
gene = golub[ccnd3, ]
tree = rpart(golubFactor ~ gene, method="class")
prp(tree, branch.lwd=4, branch.col="blue", extra=101)
summary(tree)
predict(tree, type="prob")
predict(tree, type="class")
pred = predict(tree, type="class")
table(golubFactor, pred)
golubFactor
table(golubFactor)
table(golubFactor, pred)
table(golubFactor)
## Example : Application to the acute lymphoblastic leukemia data
library(ALL)
data(ALL)
ALLB123 = ALL[, ALL$BT %in% c("B1", "B2", "B3")]
ALLB123$BT
ALL$BT
table(ALLB123$BT)
table(ALL$BT)
names = featureNames(ALL)
names
BiocManager::install("hgu95av2.db")
library(hgu95av2.db)
symb = mget(names, env=hgu95av2SYMBOL)
unlist(symb)
unlist(symb)[1:100]
ALLBTnames = ALLB123[names, ]
dim(ALLBTnames)
dim(ALL)
source("~/Documents/GitHub/undergraduate/3학년 1학기/Introduction_To_Biostatistics/Lecture06_Classification Methods.R", echo=TRUE)
names
symb = mget(names, env=hgu95av2SYMBOL)
unlist(symb) # convert list to vector
probeData = as.matrix(exprs(ALLBTnames))
row.names(probeData) = unlist(symb)
probeData[1:20, 1:5]
fun = function(x) anova(lm(x ~ ALLB123$BT))$Pr[1]
anova.pValue = apply(exprs(ALLB123), 1, fun)
ww = anova.pValue < 0.00001
sum(ww)
diagnosed = factor(ALLBTnames$BT)
diagnosed
Data = data.frame(t(probeData[11, ]))
dim(Data)
library(raprt.plot)
library(rpart.plot)
fit = rpart(diagnosed ~ ., data=Data)
fit
fit = rpart(diagnosed ~ ., data=Data)
fit = rpart(diagnosed~., data=Data)
diagnosed = factor(ALLBTnames$BT)
diagnosed
Data = data.frame(t(probeData[ww, ]))
dim(Data)
library(rpart)
library(rpart.plot)
fit = rpart(diagnosed ~ ., data=Data)
prp(fit, branch.lwd=4, branch.col="blue", extra=101)
pred = predict(fit, type="class")
table(diagnosed, pred)
prob = predict(fit, type="prob")
out = data.frame(prob, predicted=pred, diagnosis=diagnosed)
out
out[pred!=diagnosed, ]
## Example : Separate training and test sets
set.seed(123)
train = sample(1:78, 39, replace=FALSE)
test = setdiff(1:78, train)
length(train)
length(test)
test
train
table(diagnosed[train])
table(diagnosed[test])
diagnosed
fit.tr = rpart(diagnosed ~ ., data=Data, subset=train)
pred.tr = predict(fit.tr, Data[train, ], type="class")
table(pred.tr, diagnosed[train])
mean(pred.tr != diagnosed[train])
pred.te = predict(fit.tr, Data[test, ], type="class")
table(pred.te, diagnosed[test])
mean(pred.te != diagnosed[test])
pred.te = predict(fit.tr, Data[test, ], type="class")
table(pred.te, diagnosed[test])
mean(pred.te != diagnosed[test])
## Example of Random Forest
library(ALL)
data(ALL)
ALLB123 = ALL[, ALL$BT %in% c("B1", "B2", "B3")]
names = featureNames(ALL)
ALLBTnames = ALLB123[names, ]
probeData = as.matrix(exprs(ALLBTnames))
fun = function(x) anova(lm(x ~ ALLB123$BT))$Pr[1]
anova.pValue = apply(exprs(ALLB123), 1, fun)
exprs(ALLB123)
ALLB123
ww = anova.pValue < 0.00001
diagnosed = factor(ALLBTnames$BT)
Data = data.frame(t(probeData[ww, ]))
set.seed(123)
train = sample(1:78, 39, replace=FALSE)
test = setdiff(1:78, train)
install.packages("randomForest")
library(randomForest)
xtr = Data[train, ]
xte = Data[test, ]
ytr = diagnosed[train]
yte = diagnosed[test]
rf1 = randomForest(x=xtr, y=ytr, xtest=xte, ytest=yte, ntree=1000, mtry=1)
rf1$test$confusion
rf1.conf = rf1$test$confusion[1:3, 1:3]
rf1.conf
1 - sum(diag(rf1.conf)) / sum(rf1.conf)
rf2 = randomForest(x=xtr, y=ytr, xtest=xte, ytest=yte, ntree=1000, mtry=3)
rf2$test$confusion
rf2.conf = rf2$test$confusion[1:3, 1:3]
1 - sum(diag(rf2.conf)) / sum(rf2.conf)
rf3 = randomForest(x=xtr, y=ytr, xtest=xte, ytest=yte, ntree=1000, mtry=3)
rf3$test$confusion
rf3.conf = rf3$test$confusion[1:3, 1:3]
1 - sum(diag(rf3.conf)) / sum(rf3.conf)
perf
plot(perfccnd3, lwd=4, col="blue")
perf$values
type(perf)
class(perf)
library(ROCR)
true = factor(golub.cl, levels=0:1, labels=c("FALSE", "TRUE"))
yprob = predict(g, type="response")
pred = prediction(yprob, true)
perf = performance(pred, "tpr", "fpr")
plot(perf, lwd=2, col="blue")
performance(pred, "auc")@y.values
perf
performance(pred, "tpr", "fpr")
