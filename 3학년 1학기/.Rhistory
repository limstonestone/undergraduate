df2
df2[order(df2[,'mean_value']), ]
df2[order(df2[,'mean_value']), ]
rownames(df2) = seq(1:64)
### 2)
df2 = data.frame(rowMeans(nci.data))
colnames(df2) = "mean_value"
df2["row_type"] = rownames(df2)
rownames(df2) = seq(1:64)
df2 = df2[order(df2[,'mean_value']), ]
df2
df2[,1:5]
df2[1:5,]
# largest
df2[-1:-5,]
# largest
df2[51,]
# largest
df2[60:64,]
# largest
df2[60:65,]
# largest
df2[60:64,]
### 2)
df2 = data.frame(rowMeans(nci.data))
colnames(df2) = "mean_value"
df2["row_type"] = rownames(df2)
rownames(df2) = seq(1:64)
df2 = df2[order(df2[,'mean_value'], descending=TRUE), ]
### 2)
df2 = data.frame(rowMeans(nci.data))
colnames(df2) = "mean_value"
df2["row_type"] = rownames(df2)
rownames(df2) = seq(1:64)
df2 = df2[order(-df2[,'mean_value'], descending=TRUE), ]
### 2)
df2 = data.frame(rowMeans(nci.data))
colnames(df2) = "mean_value"
df2["row_type"] = rownames(df2)
rownames(df2) = seq(1:64)
df2 = df2[order(-df2[,'mean_value'], ]
df2 = df2[order(-df2[,'mean_value']), ]
df2
# largest
df2[60:64,]
# largest
df2[1:5,]
# largest
df2[1:5]
# largest
df2[1:5,]
# smallest
df2[60:64]
# smallest
df2[60:64, ]
### 3)
shapiro.test(nci.data)
### 3)
apply(nci.data, 1, shapiro.test)
### 3)
apply(nci.data, 1, shapiro.test())
### 3)
apply(nci.data, 1, shapiro.test)
return (y)
shapiro = function(x){
y = shapiro.test(x)
return (y)
}
apply(nci.data, 1, shapiro)
### 3)
data = t(nci.data)
data
colnames(data) = nci.labs
data
data[,"RENAL"]
dim(data[,"RENAL"])
length(data[,"RENAL"])
dim(data)
}
### 3)
for (i in 1:64){
}
shapiro.test(nci.data[i])
### 3)
for (i in 1:64){
shapiro.test(nci.data[i,])
}
### 3)
apply(nci.data, 1, shapiro.test)
### 3)
shapiro.test(nci.data)
### 3)
shapiro.test(nci.data)$p.value
### 3)
shapiro.test(nci.data[0:5000])$p.value
apply(nci.data, 2, shapiro.test)
apply(nci.data, 2, shapiro.test)$p.value
apply(nci.data, 2, shapiro.test$p.value)
### 3)
p_values = list()
for (column in colnames(nci.data)){
p_values = append(shapiro.test(nci.data[,column])$p.value, p_values)
}
p_values > 0.01
sum(p_values > 0.01)
sum(p_values > 0.01)/length(p_values)
sum(p_values < 0.01)/length(p_values)
### 2)
rowMeans(nci.data)
### 2)
colMeans(nci.data)
### 2)
# 6830개 ver
sort(colMeans(nci.data))
### 2)
# 6830개 ver
sort(colMeans(nci.data))[1:5]
### 2)
# 6830개 ver
#
sort(colMeans(-nci.data))[1:5]
# largest
df2[1:5,]
### 2)
# 6830개 ver
# largest
sort(colMeans(-nci.data))[1:5]
# smallest
sort(colMeans(nci.data))[1:5]
### 2)
# 6830개 ver
# largest
sort(colMeans(-nci.data))[1:5]
# smallest
sort(colMeans(nci.data))[1:5]
### 2)
# 6830개 ver
# largest
sort(colMeans(-nci.data))[1:5]
### 2)
# 6830개 ver
# largest
sort(colMeans(nci.data))[1:5]
# smallest
sort(colMeans(-nci.data))[1:5]
# 64개 ver
sort(rowMeans(nci.data))[1:5]
# 64개 ver
sort(rowMeans(-nci.data))[1:5]
5
# largest
df2[1:5,]
### 2)
# 6830개 ver
# largest
sort(colMeans(nci.data))[1:5]
### 2)
# 6830개 ver
# largest
sort(-colMeans(nci.data))[1:5]
### 2)
# 6830개 ver
# largest
sort(colMeans(nci.data))[1:5]
# smallest
sort(-colMeans(nci.data))[1:5]
### 2)
# 6830개 ver
# largest
sort(colMeans(nci.data))[1:5]
### 2)
# 6830개 ver
# largest
sort(colMeans(nci.data))
### 2)
# 6830개 ver
# largest
sort(colMeans(nci.data), decreasing=FALSE)
### 2)
# 6830개 ver
# largest
sort(colMeans(nci.data), decreasing=FALSE)[1:5]
### 2)
# 6830개 ver
# largest
sort(colMeans(nci.data), decreasing=TRUE)[1:5]
# smallest
sort(colMeans(nci.data), decreasing=FALSE)[1:5]
# 64개 ver
sort(rowMeans(nci.data), decreasing=TRUE)[1:5]
# largest
df2[1:5,]
# smallest
sort(colMeans(nci.data))[1:5]
# smallest
sort(rowMeans(nci.data))[1:5]
# smallest
df2[60:64, ]
nci.labs[!A]
### 4)
A = c("BREAST", "COLON", "MELANOMA", "RENAL")
nci.labs[!A]
nci.labs[!(nci.labs %in% A)]
unique(nci.labs[!(nci.labs %in% A)])
### 4)
A = c("BREAST", "COLON", "MELANOMA", "RENAL")
B = unique(nci.labs[!(nci.labs %in% A)])
### average
df1 = data.frame(
cancer_type = unique(nci.labs),
mean_value = 0
)
for (cancer in unique(nci.labs)){
mean = mean(nci.data[nci.labs==cancer])
df1[df1['cancer_type']==cancer, 'mean_value'] = mean
}
df1 = df1[order(df1[,'mean_value']), ]
df1
# data = as.data.frame(nci.data, row.names=nci.labs)
rownames(nci.data) = nci.labs
nci.data
for (cancer in unique(nci.labs)){
mean = mean(nci.data[nci.labs==cancer])
df1[df1['cancer_type']==cancer, 'mean_value'] = mean
}
mean(nci.data['RENAL',])
length(nci.data['RENAL',])
length(nci.data['CNS',])
length(nci.data['e',])
nci.data[0]
nci.data[1]
nci.data[,1]
data = nci.data
data['cancer'] = nci.labs
data['cancer']
data[, 'cancer'] = nci.labs
data = nci.data
data[, 'cancer'] = nci.labs
data = nci.data
data['cancer'] = 0
data['cancer'] = nci.labs
nci.labs
data = nci.data
data['cancer'] = 0
data['cancer']
data = nci.data
data['cancer'] = 1:64
data['cancer']
data = nci.data
dim(data)
data = nci.data
for (i in 1:64){
data[i, 'cancer'] = nci.labs[i]
}
data['cancer']
data['cancer'] = 0
for (i in 1:64){
data[i, 'cancer'] = nci.labs[i]
}
data$cancer = 0
for (i in 1:64){
data[i, 'cancer'] = nci.labs[i]
}
data$cancer = 0
dim(data)
data = nci.data
data = nci.data
dim(data)
length(nci.labs)
data[, 'cancer'] =
class(nci.labs)
data[, 'cancer'] =
class(nci.labs)
data[, 'cancer'] = nci.labs
class(nci.labs)
data[, 'cancer'] = c(nci.labs)
data[, 'cancer'] = nci.labs
data[, 'type'] = nci.labs
nci.labs
nci.labs[1]
seq(1, 64)
data[i, 'cancer'] = nci.labs[i]
for (i in seq(1, 64)){
data[i, 'cancer'] = nci.labs[i]
}
### average
df1 = data.frame(
cancer_type = unique(nci.labs),
mean_value = 0
)
for (cancer in unique(nci.labs)){
mean = mean(nci.data[nci.labs==cancer])
df1[df1['cancer_type']==cancer, 'mean_value'] = mean
}
df1 = df1[order(df1[,'mean_value']), ]
df1
data = nci.data
data[,4]
data[,'cancer']
1:64
data[,'cancer'] = 1:64
data[,'cancer'] = (1:64)
data = data.frame(nci.data)
data
dim(data)
data[,1]
data[,c(1,2)]
data = as.data.frame(nci.data)
data[,c(1,2)]
data[,c(1,2)]
rownames(data) = rownames(nci.data)
data = data.frame(nci.data)
data = as.data.frame(nci.data)
data = as.data.frame(nci.data)
colnames(data)
rownames(data)
rownames(data) = rownames(nci.data)
rownames(data) <- rownames(nci.data)
rownames(nci.data)
nci.data["cancer"] = nci.labs
nci.data["cancer"]
nci.labs = NCI60$labs
nci.data = NCI60$data
### average
df1 = data.frame(
cancer_type = unique(nci.labs),
mean_value = 0
)
for (cancer in unique(nci.labs)){
mean = mean(nci.data[nci.labs==cancer])
df1[df1['cancer_type']==cancer, 'mean_value'] = mean
}
df1 = df1[order(df1[,'mean_value']), ]
df1
apply(nci.data, 1, mean)
rownames(nci.data)
nci.data = NCI60$data
rownames(nci.data)
data = as.data.frame(nci.data)
data
data[,2]
rownames(data)
colnames(data)
data["cancer"] = nci.labs
data["cancer"]
apply(nci.data, 1, mean)
### average
df1 = data.frame(
cancer_type = unique(nci.labs),
mean_value = 0
)
### 1)
mean(nci.data[nci.data["cancer"] == cancer])
### 1)
mean(nci.data[nci.data["cancer"] == "RENAL"])
### 1)
mean(data[data["cancer"] == "RENAL"])
data = as.data.frame(nci.data)
data["cancer"] = nci.labs
### 1)
mean(data[data["cancer"]=="RENAL"])
### 1)
mean(data[data["cancer"]=="CNS"])
### 1)
mean(data[data[,"cancer"]=="CNS"])
### 1)
mean(data[data[,"cancer"]=="CNS", ])
### 1)
mean(data)
### 1)
mean(data["CNS"])
rownames(nci.data) = nci.labs
rm(list=ls())
library(ISLR)
data(NCI60)
unique(NCI60$labs)
dim(NCI60$data)
nci.labs = NCI60$labs
nci.data = NCI60$data
rownames(nci.data) = nci.labs
### 1)
### average
df1 = data.frame(
cancer_type = unique(nci.labs),
mean_value = 0
)
for (cancer in unique(nci.labs)){
mean = mean(nci.data[nci.labs==cancer])
df1[df1['cancer_type']==cancer, 'mean_value'] = mean
}
df1 = df1[order(df1[,'mean_value']), ]
df1
### 2)
### 6830개 ver
# largest
sort(colMeans(nci.data), decreasing=TRUE)[1:5]
# smallest
sort(colMeans(nci.data))[1:5]
### 64개 ver
# largest
sort(rowMeans(nci.data), decreasing=TRUE)[1:5]
# smallest
sort(rowMeans(nci.data))[1:5]
### 3)
p_values = list()
for (column in colnames(nci.data)){
p_values = append(shapiro.test(nci.data[,column])$p.value, p_values)
}
# proportion
sum(p_values < 0.01)/length(p_values)
### 4)
A = c("BREAST", "COLON", "MELANOMA", "RENAL")
B = unique(nci.labs[!(nci.labs %in% A)])
t.test(nci.data[A])
nci.data[A]
nci.data[A, ]
dim(nci.data[A, ])
rownames(nci.data[A, ])
t.test(nci.data[A, ], nci.data[B,], var.equal=FALSE)
t.test(nci.data[A, ], nci.data[B,], var.equal=FALSE)
B = (nci.labs[!(nci.labs %in% A)])
B
nci.data[B,]
dim(nci.data[B,])
### 4)
A = c("BREAST", "COLON", "MELANOMA", "RENAL")
A = (nci.labs[(nci.labs %in% A)])
B = (nci.labs[!(nci.labs %in% A)])
dim(nci.data[B,])
dim(nci.data[A,])
t.test(nci.data[A, ], nci.data[B,], var.equal=FALSE)
df4 = data.frame(
genes = colnames(nci.data)
p_value = 0
)
df4 = data.frame(
genes = colnames(nci.data),
p_value = 0
)
df4
for (column in colnames(nci.data)){\
p_value = t.test(nci.data[A, column], nci.data[B, column], var.equal=FALSE)$p.value
df4[column, "p_value"] = p_value
}
for (column in colnames(nci.data)){
p_value = t.test(nci.data[A, column], nci.data[B, column], var.equal=FALSE)$p.value
df4[column, "p_value"] = p_value
}
df4
df4 = data.frame(
p_value = colnames(nci.data)
)
for (column in colnames(nci.data)){
p_value = t.test(nci.data[A, column], nci.data[B, column], var.equal=FALSE)$p.value
df4[column, "p_value"] = p_value
}
df4
df4[order(df4[,'p_value']), ]
df4 = data.frame(
genes = colnames(nci.data),
p_value = 0
)
for (column in colnames(nci.data)){
p_value = t.test(nci.data[A, column], nci.data[B, column], var.equal=FALSE)$p.value
df4[column, "p_value"] = p_value
}
df4[order(df4[,'p_value']), ]
df4 = df4[order(df4[,'p_value']), ]
df4[1]
df4[1, ]
df4
df4 = df4[order(df4[,'p_value'], decreasing=TRUE), ]
df4[1, ]
df4 = df4[order(df4[,'p_value'], ]
df4 = df4[order(df4[,'p_value']), ]
df4[1:5, ]
data(golub, package="multtest")
golubFactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
pval = NULL
m = nrow(golub)
for (i in 1:m){
pval[i] = t.test(golub[i, ] ~ golubFactor)$p.val
}
sum(pval < 0.05)
sum(pval < 0.05/m)
top = 20
oo = order(pval)
oot = oo[1:top]
data.frame(gene=golub.gnames[oot, 3], pvalue=pval[oot])
par(mfrow=c(1, 2))
hist(pval, col="orange", xlab="", main="Un-adjusted p-values")
hist(pj, col="purple", xlab="", main="Adjusted p-values")
pj = p.adjust(pval, method="bonferroni")  # Bonferroni adjustment p-value
sum(pj < 0.05)
hist(pj, col="purple", xlab="", main="Adjusted p-values")
par(mfrow=c(1, 1))
plot(-log10(pval), type="p", pch=20, col="red", xlab="gene")
abline(h=-log10(0.05/m), lty=2)
ph = p.adjust(pval, method="holm")
sum(ph < 0.05)
top = sum(ph < 0.05)
oo = order(pval)
oot = oo[1:top]
data.frame(gene=golub.gnames[oot, 3], pvalue=pval[oot],
Bonferroni=pj[oot], Holm=ph[oot])
pval2 = NULL
for (i in 1:m){
pval2[i] = wilcox.test(golub[i, ] ~ golubFactor)$p.val
}
pj2 = p.adjust(pval2, method="bonferroni")
ph2 = p.adjust(pval2, method="holm")
c(sum(pval2 < 0.05), sum(pj2 < 0.05), sum(ph2 < 0.05))
