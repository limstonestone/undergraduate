getwd()
# CODE 1.4.1
Data1.1.1 = read.table('Multivariate_Analysis_1/data/3subjects.txt', header=T)
# CODE 1.4.1
# 공분산행렬과 상관행렬 대수적 계산
Data1.1.1 = read.table('Multivariate_Analysis_1/data/3subjects.txt', header=T)
X = Data1.1.1[, -1]
X = as.matrix(X)                # 자료행렬
n = nrow(X)
xbar = t(X)%*%matrix(1, n, 1)/n # 평균벡터
I = diag(n)
j = matrix(1, n, n)
H = I - 1/n*j                   # 중심화행렬
Y = H%*%X                       # 중심화 자료행렬
S = t(Y)%*%Y/(n-1)              # 공분산행렬
D = diag(1/sqrt(diag(S)))       # 표준편차행렬의 역
Z = H%*%X%*%D                   # 표준화자료행렬
colnames(Z) = colnames(X)
R = t(Z)%*%Z/(n-1)              # 상관행렬
R_S = D%*%S%*%D                 # 상관행렬과 공분산행렬의 대수적 관계
detS = det(S)                   # 일반화분산
detR = det(R)
trS = sum(diag(S))              # 총분산
trR = sum(diag(R))
# 결과 출력
X; Y; Z; S; R; detS; trS; detR; trR
X
# CODE 1.4.1
# 공분산행렬과 상관행렬 대수적 계산
Data1.1.1 = read.table('Multivariate_Analysis_1/data/3subjects.txt', header=T)
X = Data1.1.1
X = as.matrix(X)                # 자료행렬
n = nrow(X)
xbar = t(X)%*%matrix(1, n, 1)/n # 평균벡터
I = diag(n)
j = matrix(1, n, n)
H = I - 1/n*j                   # 중심화행렬
Y = H%*%X                       # 중심화 자료행렬
S = t(Y)%*%Y/(n-1)              # 공분산행렬
D = diag(1/sqrt(diag(S)))       # 표준편차행렬의 역
Z = H%*%X%*%D                   # 표준화자료행렬
colnames(Z) = colnames(X)
R = t(Z)%*%Z/(n-1)              # 상관행렬
R_S = D%*%S%*%D                 # 상관행렬과 공분산행렬의 대수적 관계
detS = det(S)                   # 일반화분산
detR = det(R)
trS = sum(diag(S))              # 총분산
trR = sum(diag(R))
# 결과 출력
X; Y; Z; S; R; detS; trS; detR; trR
### CODE 1.4.2
# 일반화분산과 총분산의 계산
XX = read.table('Multivariate_Analysis_1/data/irisflower.txt', header=T)
### CODE 1.4.2
# 일반화분산과 총분산의 계산
XX = read.table('Multivariate_Analysis_1/data/irisflower.txt', header=T, fileEncoding="euc-kr")
XX
XX = XX[, 2:5]
XX = as.matrix(XX)
SandR = array(NA, c(4, 4, 6))
rowNames(SandR) = colNames(XX)
rownames(SandR) = colnames(XX)
colnames(SandR) = colnames(XX)
variation = matrix(NA, 3, 4)
rownames(variation) = c("setosa", "versicolor", "virginica")
colnames(variation) = c("detS", "trS", "detR", "trR")
XX
XX = read.table('Multivariate_Analysis_1/data/irisflower.txt', header=T, fileEncoding="euc-kr")
XX = XX[, 2:5]
XX = as.matrix(XX)
SandR = array(NA, c(4, 4, 6))
rownames(SandR) = colnames(XX)
colnames(SandR) = colnames(XX)
variation = matrix(NA, 3, 4)
rownames(variation) = c("setosa", "versicolor", "virginica")
colnames(variation) = c("detS", "trS", "detR", "trR")
for(i in 1:3) {
X = XX[(50*(i-1) + 1):(50*i), ]
S = cov(X)  # 공분산 행렬 계산
R = cor(X)  # 상관 행렬 계산
detS = det(S)
detR = det(R)
trS = sum(diag(S))
trR = sum(diag(R))
SandR[, , i*2-1] = S
SandR[, , i*2] = R
variation[i, 1] = detS
variation[i, 2] = trS
variation[i, 3] = detR
variation[i, 4] = trR
}
SandR = round(SandR, 3)
variation = round(variation, 6)
setosa = list(SandR[, , 1], SandR[, , 2], variation[1,])
versicolor = list(SandR[, , 3], SandR[, , 4], variation[2,])
verginica = list(SandR[, , 5], SandR[, , 6], variation[3,])
setosa
versicolor
virginica
virginica = list(SandR[, , 5], SandR[, , 6], variation[3,])
setosa
versicolor
virginica
### CODE 1.5.1
# 유클리드 거리, 표준화 유클리드 거리, 마할라노비스 거리, 시티블럭 거리 계산
# Euclidean distance => Cluster Analysis / Multi Dimensional Scaling 등에 사용
# Mahalanobis distance => Hotelling T_square test / Discriminant Analysis 등에 사용
Data1.1.1 = read.table('Multivariate_Analysis_1/data/3subjects.txt', header=T)
X = Data1.1.1
X
X = as.matrix(Data1.1.1[,-1])
X
X = Data1.1.1
X = as.matrix(Data1.1.1)
X
n = nrow(X)
# 마할라노비스 거리
library(biotools)
# 마할라노비스 거리
install.packages('biotools')
# 마할라노비스 거리
# install.packages('biotools')
library(biotools)
# 마할라노비스 거리
# install.packages('biotools')
library(biotools)
dm = D2.dist(X, S)
### CODE 1.5.1
# 유클리드 거리, 표준화 유클리드 거리, 마할라노비스 거리, 시티블럭 거리 계산
# Euclidean distance => Cluster Analysis / Multi Dimensional Scaling 등에 사용
# Mahalanobis distance => Hotelling T_square test / Discriminant Analysis 등에 사용
Data1.1.1 = read.table('Multivariate_Analysis_1/data/3subjects.txt', header=T)
X = Data1.1.1
X = as.matrix(Data1.1.1)
n = nrow(X)
xbar = t(X)%*%matrix(1, n, 1)/n   # 평균벡터
I = diag(n)
J = matrix(1, n, n)
H = I-1/n*J                       # 중심화행렬
Y = H%*%X                         # 중심화 자료행렬
S = t(Y)%*%Y/(n-1)                # 공분산행렬
D = diag(1/sqrt(diag(S)))         # 표준편차행렬의 역
Z = Y%*%D                         # 표준화자료행렬
colnames(Z) = colnames(X)
# 유클리드 거리
de = as.matrix(dist(X, method="euclidean"))
de = as.dist(de)
round(de, 3)
# 표준화 유클리드 거리
ds = as.matrix(dist(Z, method="euclidean"))
ds = as.dist(ds)
round(ds, 3)
# 마할라노비스 거리
# install.packages('biotools')
library(biotools)
dm = D2.dist(X, S)
round(sqrt(dm), 3)
dm = D2.dist(X, S)
# 시티블럭 거리
dc = as.matrix(dist(X, method="manhattan"))
dc = as.dist(dc)
round(dc, 3)
### CODE 1.5.1
# 유클리드 거리, 표준화 유클리드 거리, 마할라노비스 거리, 시티블럭 거리 계산
# Euclidean distance => Cluster Analysis / Multi Dimensional Scaling 등에 사용
# Mahalanobis distance => Hotelling T_square test / Discriminant Analysis 등에 사용
Data1.1.1 = read.table('Multivariate_Analysis_1/data/3subjects.txt', header=T)
X = Data1.1.1
X = as.matrix(Data1.1.1)
n = nrow(X)
xbar = t(X)%*%matrix(1, n, 1)/n   # 평균벡터
I = diag(n)
J = matrix(1, n, n)
H = I-1/n*J                       # 중심화행렬
Y = H%*%X                         # 중심화 자료행렬
S = t(Y)%*%Y/(n-1)                # 공분산행렬
D = diag(1/sqrt(diag(S)))         # 표준편차행렬의 역
Z = Y%*%D                         # 표준화자료행렬
colnames(Z) = colnames(X)
# 유클리드 거리
de = as.matrix(dist(X, method="euclidean"))
de = as.dist(de)
round(de, 3)
# 표준화 유클리드 거리
ds = as.matrix(dist(Z, method="euclidean"))
ds = as.dist(ds)
round(ds, 3)
# 마할라노비스 거리
# install.packages('biotools')
library(biotools)
dm = D2.dist(X, S)
round(sqrt(dm), 3)
# 시티블럭 거리
dc = as.matrix(dist(X, method="manhattan"))
dc = as.dist(dc)
round(dc, 3)
### CODE 1.5.1
# 유클리드 거리, 표준화 유클리드 거리, 마할라노비스 거리, 시티블럭 거리 계산
# Euclidean distance => Cluster Analysis / Multi Dimensional Scaling 등에 사용
# Mahalanobis distance => Hotelling T_square test / Discriminant Analysis 등에 사용
Data1.1.1 = read.table('Multivariate_Analysis_1/data/3subjects.txt', header=T)
X = Data1.1.1
X = as.matrix(Data1.1.1)
n = nrow(X)
xbar = t(X)%*%matrix(1, n, 1)/n   # 평균벡터
I = diag(n)
J = matrix(1, n, n)
H = I-1/n*J                       # 중심화행렬
Y = H%*%X                         # 중심화 자료행렬
S = t(Y)%*%Y/(n-1)                # 공분산행렬
D = diag(1/sqrt(diag(S)))         # 표준편차행렬의 역
Z = Y%*%D                         # 표준화자료행렬
colnames(Z) = colnames(X)
# 유클리드 거리
de = as.matrix(dist(X, method="euclidean"))
de = as.dist(de)
round(de, 3)
# 표준화 유클리드 거리
ds = as.matrix(dist(Z, method="euclidean"))
ds = as.dist(ds)
round(ds, 3)
# 마할라노비스 거리
# install.packages('biotools')
library(biotools)
dm = D2.dist(X, S)
round(sqrt(dm), 3)
# 시티블럭 거리
dc = as.matrix(dist(X, method="manhattan"))
dc = as.dist(dc)
round(dc, 3)
# The Z-test
data(golub, package="multtest")
golubFactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
x = golub[2058, golubFactor=="ALL"]
n = length(x)
sigma = 0.25 ; mu0 = 0 # 현실에서 알기는 거의 불가능
z.value = sqrt(n)*(mean(x)-mu0)/sigma
2*pnorm(-2bs(z.value))
2*pnorm(-abs(z.value))
# The Z-test
data(golub, package="multtest")
golubFactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
x = golub[2058, golubFactor=="ALL"]
n = length(x)
sigma = 0.25 ; mu0 = 0 # 현실에서 알기는 거의 불가능
z.value = sqrt(n)*(mean(x)-mu0)/sigma
2*pnorm(-abs(z.value)) # Significance level 0.05 보다 훨씬 크기 때문에 Not reject H0
rm(list=ls())
# The Z-test
data(golub, package="multtest")
golubFactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
x = golub[2058, golubFactor=="ALL"]
n = length(x)
sigma = 0.25 ; mu0 = 0 # 현실에서 알기는 거의 불가능
z.value = sqrt(n)*(mean(x)-mu0)/sigma
2*pnorm(-abs(z.value)) # Significance level 0.05 보다 훨씬 크기 때문에 Not reject H0
f = function(x) dnorm(x, 0, 1)
alpha = 0.05
qz = qnorm(1-alpha/2)
x1 = seq(-4, -qz, 0.01) ; y1 = dnorm(x1, 0, 1)
x2 = seq(-qz, qz, 0.01) ; y2 = dnorm(x2, 0, 1)
x3 = seq(qz, 4, 0.01) ; y3 = dnorm(x3, 0, 1)
plot(f, -4, 4, cex.lab=1.5, xlab="x", ylab="f(x)",
main="Normal probability density function f(x)")
polygon(x(-4, x1, -qz), c(0, y1, 0), col='red')
polygon(c(-4, x1, -qz), c(0, y1, 0), col='red')
polygon(c(-qz, x2, qz), c(0, y2, 0), col="lightblue")
polygon(c(qz, x3, 4), c(0, y3, 0), col="red")
arrows(-3, 0.15, -3, 0.03)
text(-3, 0.23, "Rejection")
text(-3, 0.20, "Region")
text(-3, 0.17, expression(alpha/2))
arrows(3, 0.15, 3, 0.03)
text(3, 0.23, "Rejection")
text(3, 0.20, "Region")
text(3, 0.17, expression(alpha/2))
text(0, 0.23, "Acceptance")
text(0, 0.20, "Region")
mean(x) + qnorm(0.025) * sigma/sqrt(n)
mean(x) + qnorm(0.975) * sigma/sqrt(n)
mean(x) + c(-1, 1) * qnorm(0.975) * sigma/sqrt(n)
# One Sample T-test
## Z-test 는 현실적으로 모집단의 표준편차를 모르기 때문에 적용 불가능!
## 대체로 표본표준편차를 사용하는 T-test 를 사용한다.
f = function(x) dt(x, 5)
dt(x, 5)
?dt
alpha = 0.05
qt5 = qt(1-alpha/2, 5)
y3 <- f(x3)
x1 <- seq(-4, -qt5, 0.01)
y1 <- f(x1)
x2 <- seq(-qt5, qt5, 0.01)
y2 <- f(x2)
x3 <- seq(qt5, 4, 0.01)
y3 <- f(x3)
plot(f, -4, 4, xlab="x", ylab="f(x)", main="T-distribution probability density function f(x)")
polygon(c(-4, x1, -qt5), c(0, y1 , 0), col="red")
polygon(c(-qt5, x2, qt5), c(0, y2, 0), col="lightblue")
polygon(c(qt5, x3, 4), c(0, y3, 0), col="red")
arrows(-3, 0.15, -3, 0.03)
text(-3, 0.23, "Rejection")
text(-3, 0.20, "Region")
text(-3, 0.17, expression(alpha/2))
arrows(3, 0.15, 3, 0.03)
text(3, 0.23, "Rejection")
text(3, 0.20, "Region")
text(3, 0.17, expression(alpha/2))
text(0, 0.23, "Acceptance")
text(0, 0.20, "Region")
mtext(expression(t[0.025]), side=1, at=-qt5, col="red")
mtext(expression(t[0.975]), side=2, at=qt5, col="red")
mtext(expression(t[0.975]), side=1, at=qt5, col="red")
## Example
x = golub[2058, golubFactor="ALL"]
mu0 = 0
n = 27
t.value = sqrt(n)*(mean(x) - mu0)/sd(x)
t.value
2*pt(-abs(t.value), 26)
alpha = 0.05
mean(x) + c(qt(alpha/2, n-1), qt(1-alpha/2, n-1)) * sd(x)/sqrt(n)
mean(x)
x
## built-in function
t.test(x, mu=0)
t.test(x, mu=0, alternative="greater")
t.test(x, mu=0, alternative="less")
## Example
ccnd3 = grep("CCND3", golub.gnames[, 2], ignore.case=TRUE)
ccnd3
par(mfrow=c(1,2))
stripchart(golub[ccnd3, ] ~ golubFactor, method="jitter", cex.lab=1.5,
ylab="", vertical=TRUE, col=c("red", "darkgreen"), xlab="Leukemia subtype")
boxplot(golub[ccnd3,] ~ golubFactor, cex.lab=1.5, main=NULL,
xlab="Leukemia subtype", col=c("purple","green"),
ylab="CCND3 (Cyclin D3) Expression")
ALL = golubFactor=="ALL"
t.test(golub[ccnd3, ALL], mu=0, alternative="greater")
t.test(golub[ccnd3, !ALL], mu=0, alternative="greater")
t.test(golub[ccnd3, ALL], mu=0, alternative="less")
t.test(golub[ccnd3, !ALL], mu=0, alternative="less")
## Welch two-sample t=test (var.equal = FALSE)
t.test(c(golub[ccnd3, ALL], golub[ccnd3, !ALL]), var.equal=FALSE)
## Welch two-sample t=test (var.equal = FALSE)
t.test(c(golub[ccnd3, ALL], golub[ccnd3, !ALL]), var.equal=TRUE)
## Welch two-sample t=test (var.equal = FALSE)
t.test(c(golub[ccnd3, ALL], golub[ccnd3, !ALL]), var.equal=FALSE)
## Welch two-sample t=test (var.equal = FALSE)
t.test((golub[ccnd3, ALL], golub[ccnd3, !ALL], var.equal=FALSE)
## Welch two-sample t=test (var.equal = FALSE)
t.test(golub[ccnd3, ALL] ~ golubFactor, var.equal=FALSE)
## Welch two-sample t=test (var.equal = FALSE)
t.test(golub[ccnd3,] ~ golubFactor, var.equal=FALSE)
t.test(golub[ccnd3,ALL] ~ golub[ccnd3, !ALL], var.equal=FALSE)
t.test(golub[ccnd3,ALL], golub[ccnd3, !ALL], var.equal=FALSE)
t.test(golub[ccnd3, ALL], golub[ccnd3, !ALL], var.equal=FALSE,
alternative="greater")
t.test(golub[ccnd3, ALL], golub[ccnd3, !ALL], var.equal=FALSE,
alternative="greater")
t.test(golub[ccnd3, ALL], golub[ccnd3, !ALL], var.equal=FALSE,
alternative="less")
## Pooled two-sample t-test (var.equal = TRUE)
## 등분산 검정 우선되어야 함
t.test(golub[ccnd3,] ~ golubFactor, var.equal=TRUE)
