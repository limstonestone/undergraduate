points(cl$centers, col=1:2, pch=8, cex=4)
cl = kmeans(data, 3, nstart=20)
plot(data, col=cl$cluster, pch=19, xlab="", ylab="",
main="K-Means Clustering Results with K=3")
points(cl$centers, col=1:3, pch=8, cex=4)
set.seed(111)
par(mfrow=c(1,2))
cl = kmeans(data, 3, nstart=1)
tv = round(cl$tot.withinss, 3)
plot(data, col=cl$cluster, pch=19, xlab="", ylab="",
main=paste("(", tv, ")"))
points(cl$centers, col=1:3, pch=8, cex=4)
cl = kmeans(data, 3, nstart=20)
tv = round(cl$tot.withinss, 3)
plot(data, col=cl$cluster, pch=19, xlab="", ylab="",
main=paste("(", tv, ")"))
points(cl$centers, col=1:3, pch=8, cex=4)
par(mfrow=c(1,1))
data(golub, package="multtest")
zyxin = grep("Zyxin", golub.gnames[, 2])
ccnd3 = grep("CCND3", golub.gnames[, 2])
data = data.frame(golub[ccnd3, ], golub[zyxin, ])
colnames(data) = c("CCND3 (Cyclin D3)", "Zyxin")
cl = kmeans(data, 2, nstart=20)
cbind(cl$cluster, golub.cl)
plot(data, col=cl$cluster, pch=19, xlab="", ylab="")
points(cl$centers, col=1:2, pch=8, cex=4)
par(mfrow=c(1, 3))
cl = kmeans(data, 2, nstart=20)
plot(data, col=cl$cluster, pch=19, xlab="", ylab="",
main="K = 2")
points(cl$centers, col=1:2, pch=8, cex=4)
cl = kmeans(data, 3, nstart=20)
plot(data, col=cl$cluster, pch=19, xlab="", ylab="",
main="K = 3")
points(cl$centers, col=1:3, pch=8, cex=4)
cl = kmeans(data, 4, nstart=20)
plot(data, col=cl$cluster, pch=19, xlab="", ylab="",
main="K = 4")
points(cl$centers, col=1:4, pch=8, cex=4)
names = list(c("g1", "g2", "g3", "g4", "g5"), c("patient 1", "patient 2"))
sl = matrix(c(1, 1, 1, 1.3, 3, 2, 3, 2.4, 5, 5), ncol=2, byrow=TRUE, dimnames=names)
rr = c(0, 6)
par(mfrow=c(1,1))
plot(sl, pch=19, col="blue", cex=1.5, xlim=rr, ylim=rr)
text(sl, labels=row.names(sl), pos=4, col="red", cex=1.2)
print(dist(sl, method="euclidian"), digits=3)
ds = dist(sl, method="euclidean")
sl.out = hclust(ds, method="single")
sl.out
plot(sl.out, lwd=3, col="blue", col.axis = "brown",
hang=-1, main=NA, sub=NA, axes=FALSE, ylab="Distance",
xlab="Clustering of the expression of 5 genes")
axis(side=2, at=seq(0,3.5,.5), col="brown", labels=TRUE, lwd=4)
set.seed(12345)
x = rnorm(20)
out = hclust(dist(x, method="euclidean"), method="single")
plot(out, lwd=3, col="blue", hang=-1, main=NA, sub=NA, axes=FALSE, ylab="Distance",
xlab="20 genes with normal random distances")
axis(side=2, at=seq(0, 1.4, .2), col="brown", labels=TRUE, lwd=4)
set.seed(4321)
x = c(rnorm(10, 0, 0.1), rnorm(10, 3, 0.5), rnorm(10, 10, 1.0))
out = hclust(dist(x, method="euclidean"), method="single")
plot(out, lwd=3, col="blue", hang=-1, main=NA, sub=NA,
axes=FALSE, ylab="Distance",
xlab="3 clusters of 10 genes each")
axis(side=2, at=seq(0, 5, 1), col="brown", labels=TRUE, lwd=4)
abline(h=1, lty=2, lwd=2, col="gray")
data(golub, package="multtest")
zyxin = grep("Zyxin", golub.gnames[, 2])
ccnd3 = grep("CCND3", golub.gnames[ , 2])
clusdata = data.frame(golub[ccnd3, ], golub[zyxin, ])
colnames(clusdata) = c("CCND3 Cyclin D3", "Zyxin")
gfactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
gf = as.numeric(gfactor)
plot(clusdata, pch=gf+15, col=gf+1)
legend("topright", legend=c("ALL", "AML"), pch=16:17, col=c(2, 3))
dist.cl = dist(clusdata, method="euclidean")
gcl = hclust(dist.cl, method="single")
plot(gcl, lwd=3, col="blue", hang=-1, main=NA, sub=NA,
axes=FALSE, ylab="Distance",
xlab="Clustering of patients by gene expression")
axis(side=2, at=seq(0,1.2,.2), col="brown", labels=TRUE, lwd=4)
abline(h=0.6, lty=2, lwd=2, col="gray")
sort(rev(gcl$order)[1:9])
?rev
gcl$order[1:9]
rev(gcl$order[1:9])
which(gfactor=="AML")
par(mfrow=c(2,2))
hc1 = hclust(dist.cl, method="single")
plot(hc1, main="Single Linkage", xlab="", sub="", hang=-1)
abline(h=0.6, lty=2, col="blue")
hc2 = hclust(dist.cl, method="complete")
plot(hc2, main="Complete Linkage", xlab="", sub="", hang=-1)
abline(h=3, lty=2, col="orange")
hc3 = hclust(dist.cl, method="average")
plot(hc3, main="Average Linkage", xlab="", sub="", hang=-1)
abline(h=2.0, lty=2, col="green")
hc4 = hclust(dist.cl, method="centroid")
plot(hc4, main="Centroid Linkage", xlab="", sub="", hang=-1)
abline(h=1, lty=2, col="purple")
data(golub, package="multtest")
data(golub, package="multtest")
gFactor = factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
meanALL = apply(golub[ , gFactor=="ALL"], 1, mean)
meanAML = apply(golub[ , gFactor=="AML"], 1, mean)
o = order(abs(meanALL - meanAML), decreasing=TRUE)
DE50 = golub[o[1:50], ]
par(mfrow=c(1,1))
hist(DE50, nclass=50, col="orange") # Top 50 which is far from mean
library(gplots)
heatmap.2(DE50, Rowv=NA, Colv=NA, scale="row", cexRow=0.5,
col=greenred(75), dendrogram="none", key=TRUE,
symkey=FALSE, density.info="none", trace="none")
## Next, we enhance our "Top 50 Genes" heatmap by performing heirarchical clustering on both rows and columns.
heatmap.2(DE50, scale="row", col=greenred(75),
dendrogram="both", key=TRUE, symkey=FALSE,
density.info="none", trace="none", cexRow=0.5)
dev.off()
library(gplots)
heatmap.2(DE50, Rowv=NA, Colv=NA, scale="row", cexRow=0.5,
col=greenred(75), dendrogram="none", key=TRUE,
symkey=FALSE, density.info="none", trace="none")
## Next, we enhance our "Top 50 Genes" heatmap by performing heirarchical clustering on both rows and columns.
heatmap.2(DE50, scale="row", col=greenred(75),
dendrogram="both", key=TRUE, symkey=FALSE,
density.info="none", trace="none", cexRow=0.5)
data(golub, package="multtest")
mcm3 = grep("MCM3", golub.gnames[, 2])
golub.gnames[mcm3, ]
x = golub[mcm3[1], ]
y = golub[mcm3[2], ]
cor(x, y)
plot(x, y, pch=19, col="blue3")
abline(lm(y ~ x)$coef, col=2, lty=2, lwd=2)
cor.test(x, y) # H0 : 상관계수=0 을 기각
B = 10000
per.cor = NULL
for (i in 1:B) {
index1 =  sample(1:length(x))
index2 = sample(1:length(y))
per.cor[i] = cor(x[index1], y[index2])
}
hist(per.cor, nclass=50, col="orange")
c0 = cor(x, y)
abline(v=c(-c0, c0), lty=2, lwd=2, col="blue")
c0
hist(per.cor, nclass=50, col="orange")
c0 = cor(x, y)
abline(v=c(-c0, c0), lty=2, lwd=2, col="blue")
cor.test(x, y)
(sum(abs(per.cor) > abs(c0)) + 1) / (B + 1) # p-value
B = 10000
boot.cor = rep(0, B)
data = cbind(x, y)
set.seed(1)
for (i in 1:B) {
index = sample(1:nrow(data), replace=TRUE)
dat.star = data[index, ]
boot.cor[i] = cor(dat.star)[1, 2]
}
hist(boot.cor, nclass=50, col="orange")
CI = quantile(boot.cor, c(0.025, 0.975))
abline(v=CI, lty=2, lwd=2, col="blue")
mean(boot.cor)
CI
y = golub.cl
y
corgol = apply(golub, 1, function(x) cor(x, y))
corgol
o = order(abs(corgol), decreasing=TRUE)
top = 10
ot = o[1:top]
data.frame(genes=golub.gnames[ot, 3], cor=corgol[ot])
par(mfrow=c(1, 2))
par(mfrow=c(1, 2))
hist(corgol, nclass=20, col="orange", xlab="", main="PCC")
hist(fstat, nclass=20, col="lightblue", xlab="",
main="F test statistic")
par(mfrow=c(1, 2))
fun = function(x) summary(lm(x ~ y))$fstat[1] # overall F-test : H0: beta_1 = 0, F-statistic high => reject H0
fstat = apply(golub, 1, fun)
o2 = order(fstat, decreasing=TRUE)
top = 10
ot2 = o2[1:top]
data.frame(genes=golub.gnames[ot2, 3], f.stat=fstat[ot2])
par(mfrow=c(1, 2))
hist(fstat, nclass=20, col="lightblue", xlab="",
main="F test statistic")
par(mfrow=c(1, 2))
hist(corgol, nclass=20, col="orange", xlab="", main="PCC")
hist(fstat, nclass=20, col="lightblue", xlab="",
main="F test statistic")
V1 = c(1.63, -0.40, 0.93, -1.38, -0.17, -0.61)
V2 = c(1.22, 0.79, 0.97, -1.08, -0.96, -0.93)
par(mfrow=c(1,1))
plot(V1, V2, xlim=c(-2, 2), ylim=c(-2, 2), col="red", pch=15)
Z = matrix(c(V1, V2), nrow=6, byrow=FALSE)
cor(Z)
Z
e = eigen(cor(Z))
e
Z = %*% e$vec[, 1]
Z %*% e$vec[, 1]
Score = Z %*% e$vec
colnames(Score) = c("PC1", "PC2")
Score
pca = princomp(Z, cor=TRUE)
pca$scores
pca$loadings
pvar = pca$sdev^2
pvar
pve = pvar/sum(pvar)
pve
pca
data(golub, package="multtest")
cgolub = cor(golub)
dim(cgolub)
e = eigen(cgolub)
dim(e$vector)
e$values
plot(e$values, type="b", pch=19, col=2, ylab="eigenvalues",
xlab="the number of components")
n = ncol(golub)
p = nrow(golub)
B = 10000
set.seed(10101)
eval = matrix(0, B, n)
for (i in 1:B) {
index = sample(1:p, replace=TRUE)
boot = golub[index,]
eval[i, ] = eigen(cor(boot))$values
}
CI = apply(eval, 2, function(t) quantile(t, c(0.025, 0.975)))
t(CI)
golubFactor = factor(golub.cl)
o1 = grep("CD", golub.gnames[ ,2])
o2 = grep("Op", golub.gnames[ ,2])
o3 = grep("MCM", golub.gnames[ ,2])
o = c(o1, o2, o3)
length(o)
fun = function(x) t.test(x ~ golubFactor)$p.value
pt = apply(golub[o, ], 1, fun)
oo = o[pt < 0.01]
length(oo)
pca = princomp(golub)
leu = data.frame(pca$scores[oo, 1:2], row.names=oo)
plot(leu, xlim=c(-10, 15), ylim=c(-10, 10), pch=19, cex=1.2,
xlab="Principal Component 1", ylab="Principal Component 2",
col="darkgreen")
text(x=leu[, 1], y=leu[ ,2], labels=rownames(leu), pos=1,
col="blue", cex=0.6)
abline(h=0, col="grey", lty=2)
abline(v=0, col="grey", lty=2)
fac = rep(1, length(oo))
fac[oo %in% o2] = 2
fac[oo %in% o3] = 3
text(x = leu[, 1], y=leu[, 2], labels=fac, pos=3, col="red")
leu
dist = dist(leu, method="euclidean")
cl = hclust(dist, method="single")
x11()
plot(cl, lwd=3, col="blue", col.axis = "brown", ylab="Distance",
xlab="Clustering of the expression of genes",
hang=-1, main=NA, sub=NA, axes=FALSE)
axis(side=2, at=seq(0,5,1), col="brown", labels=TRUE, lwd = 4)
x11()
plot(cl, lwd=3, col="blue", col.axis = "brown", ylab="Distance",
xlab="Clustering of the expression of genes",
hang=-1, main=NA, sub=NA, axes=FALSE)
axis(side=2, at=seq(0,5,1), col="brown", labels=TRUE, lwd = 4)
a = as.integer(rownames(leu)[cl$order])
golub.gnames[a, 2]
wd = paste(getwd(), "/Multivariate_Analysis_1/data", sep="")
setwd(wd)
### Q1) PCFA를 실시하여 스크리그림을 통하여 인자개수를 정하고 총기여율을 구하라.
# Data Matrix X
Data = read.table("censustract.txt", header=T, fileEncoding="euc-kr")
X = Data
p = ncol(X)
# Correlation Matrix R
R = cor(X)
# Spectral Decomposition (# of factor)
eigen.R = eigen(R)
gof = eigen.R$values / p*100 # Goodness-of fit
plot(eigen.R$values, type="b", main="Scree Graph", xlab="Factor Number", ylab="Eigenvalue")
round(gof, 3)
# Scree Plot 상으로는 눈에 띄는 elbow point가 관찰되지는 않는다.
# 기여율을 확인해보았을때 인자 개수를 2개로 정한다면
# 총 기여율은 39.838 + 27.351 + 17.283 = 67.189% 이다.
# 변수의 개수가 많지 않아 더이상 인자를 줄이는 것은 힘들어 보인다. (실제로 인자 3개로는 MLFA 코드가 오류로 작동되지 않음)
### Q2) 인자적재값과 인자적재그림을 통하여 인자를 해석하라.
library(psych)
Z = scale(X, scale=T)
pcfa = principal(Z, nfactors=2, rotate="none")
L = pcfa$loading[, 1:2]
# 인자적재 값
round(L, 3)
Psi = pcfa$uniquenesses
Rm = R -(L %*% t(L) + diag(Psi))
round(Rm, 3)
# Residual matrix에서 특정 몇몇 원소들을 제외하고는 0에
# 가까운 값이므로 선택한 인자 2개가 모든 변수들을 어느 정도 잘 설명한다고 할 수 있다.
pcfa
# RMSR 값이 0.15이고 새로운 인자 2개의 cumulative variance가 1번 문제에서 확인했듯이  0.67(=67%)임을 알 수 있다.
# 회전시키기 전 인자적재그림
lim = range(pretty(L))
par(family="AppleGothic")
plot(L[,1], L[,2],main="Plot of Factor Loadings(f1 & f2) : none ",  xlab="f1", ylab="f2",
xlim=lim, ylim=lim)
text(L[,1], L[, 2], labels=rownames(L), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
arrows(0,0, L[,1], L[, 2], col=2, code=2, length=0.1)
### 회전시키기 전 인자적재그림은 직관적인 해석이 조금은 어려워보이므로, varimax 회전을 통한 그림을 확인해보자.
# 회전 후 인자적재값
pcfa_rotate = principal(Z, nfactors=2, rotate="varimax")
L_rotate = pcfa_rotate$loading[, 1:2]
round(L_rotate, 3)
# 회전시킨 후 인자적재 그림
lim_rotate = range(pretty(L_rotate))
par(family="AppleGothic")
plot(L_rotate[,1], L_rotate[,2],main="Plot of Factor Loadings(f1 & f2) : varimax ",  xlab="f1", ylab="f2",
xlim=lim_rotate, ylim=lim_rotate)
text(L_rotate[,1], L_rotate[, 2], labels=rownames(L_rotate), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
arrows(0,0, L_rotate[,1], L_rotate[, 2], col=2, code=2, length=0.1)
# f1(RC1)은 변수와 축이 이루는 각도를 고려해보았을때, 주택가격과 전문가비율이 큰 양의 관계를 갖는다고 할 수 있다. 즉, 주택가격 인자나 전문가 비율인자라고 할 수 있다.
# f2(RC2)는 취업율이 큰 양의 관계를 갖는다고 할 수 있다. 즉, 취업율 인자라고 할 수 있다.
# 총인구수의 경우에는 각도는 좁지만 길이가 짧기 때문에 취업율보다 더 작은 양의 관계를 갖는다.
# 실제로 이루는 각도가 더 넓은 공무원비율이 길이가 더 길어 인자적재값이 비슷하게 나옴을 알 수 있다.
# 또한 길이도 길고 서로 이루는 각도도 좁은 주택가격과 전문가 비율은 양의 상관관계를 가질것이다. (실제 상관계수값 : 0.685로 높음)
# 개인적인 해석으로는 첫번째 인자가 고소득 지역을 나타내는 인자라고 볼 수 있을것 같다.
# 두번째 인자는 첫번째 인자보다는 해석이 어렵지만 인구수가 많고 취업율이 높고, 공무원 비율은 낮다고 할 수 있으므로
# 인구가 밀집되어 있는 공업단지 등을 대표하는 인자라고 생각해 볼 수도 있을 것 같다.
### Q3) 인자점수그림을 통해 형성된 군집의 특성을 살펴보라.
# 해석의 편리함을 위해 인자회전한 값에 대하여 인자 점수그림을 그린다.
fpc_rotate = pcfa_rotate$score
round(fpc_rotate, 3)
par(mfrow=c(1, 2))
# 인자점수그림
lim_rotate = range(pretty(fpc_rotate))
plot(fpc_rotate[,1], fpc_rotate[,2],main="Factor Scores : f1 and f2",  xlab="f1", ylab="f2",
xlim=lim_rotate, ylim=lim_rotate)
text(fpc_rotate[,1], fpc_rotate[,2], labels=rownames(X), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
lim_rotate = range(pretty(L_rotate))
par(family="AppleGothic")
plot(L_rotate[,1], L_rotate[,2],main="Plot of Factor Loadings(f1 & f2) : varimax ",  xlab="f1", ylab="f2",
xlim=lim_rotate, ylim=lim_rotate)
text(L_rotate[,1], L_rotate[, 2], labels=rownames(L_rotate), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
arrows(0,0, L_rotate[,1], L_rotate[, 2], col=2, code=2, length=0.1)
# 우측의 인자적재그림을 참고하면, 인자 점수그림의 1사분면에 위치한 지역들의 군집은
# 주택가격, 취업율, 총인구수 변수 관련 비슷한 특성을 갖는 그룹임을 알 수 있다.
# 2사분면의 경우에는 전문가비율, 공무원 비율에 4분면과 비교했을때 반대 부호의 영향을 받을 것이다.
# 3사분면의 경우에는 마찬가지로 1사분면의 변수들에 반대 부호의 영향을 받을 것이다.
# 4사분면의 경우에는 전문가비율, 공무원 비율이 뻗어져 있으므로 이들 변수간의 관계가 크고 유사한 지역들의 군집임을 알 수 있다.
# 간단하게 예시를 확인해보자.
X[45:50, ]
# 실제로 전문가비율 방향으로 분포되어 있는 48번과 49번 지역은 전문가 비율이 다른지역에 비해 매우 높고,
# 공무원 비율 방향으로 크게 뻗어져있는 47번 지역은 공무원 비율이 다른 지역에 비해 매우 높다.
### Q4) (1)의 인자개수에 대해 MLFA를 실시하고 (2)~(3)을 시행한 후에 결과를 서로 비교하라.
library(MVN)
mvn(Z, mvnTest ="mardia")$multivariateNormality
# 다변량 정규성은 만족하지 않으므로 MLFA는 PCFA에 비해 부적절할것을 알 수 있다.
mlfa = factanal(Z, factors=2, rotation="varimax", score="regression")
mlfa
Lm_MLFA = mlfa$loadings[, 1:2]
round(Lm_MLFA, 3) # MLFA
round(L_rotate, 3) # PCFA
# PCFA의 결과와 비교했을때 각 인자를 대표하는 인자적재값이 MLFA의 결과가 더 큰 것을 알 수 있다. 즉 조금 더 직관적인 해석이 가능하다.
# 전체적으로는 인자 해석이 PCFA와 비슷하지만, 부호값이 다른것들이 종종 보인다.
# 이는 인자적재그림에서 구체적으로 언급한다.
Psi_MLFA = mlfa$uniquenesses
Rm_MLFA = R - (Lm_MLFA %*% t(Lm_MLFA) + diag(Psi_MLFA))
Rm_rotate = R -(L_rotate %*% t(L_rotate) + diag(pcfa_rotate$uniquenesses))
round(Rm_MLFA, 3) # Residual matrix
round(Rm_rotate, 3)
# PCFA의 결과와 비교했을때 잔차행렬의 비대각원소들이 더욱 더 0에 가까워, 잔차 부분에서는 MLFA가 선호될 수도 있다.
mlfa
# 총 기여율은57.6%로 PCFA의 약 67%에 비해 설명력이 매우 낮아졌다고 할 수 있다. 설명력 면에서는 PCFA가 선호될 것이다.
par(mfrow=c(1,2))
par(family="AppleGothic")
lim_MLFA = range(pretty(Lm_MLFA))
plot(Lm_MLFA[,1], Lm_MLFA[,2],main="Plot of ML Factor Loadings : f1 and f2",  xlab="ml f1", ylab="ml f2",
xlim=lim_MLFA, ylim=lim_MLFA)
text(Lm_MLFA[,1], Lm_MLFA[, 2], labels=rownames(Lm_MLFA), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
arrows(0,0, Lm_MLFA[,1], Lm_MLFA[, 2], col=2, code=2, length=0.1)
plot(L_rotate[,1], L_rotate[,2],main="Plot of PC Factor Loadings : f1 and f2",  xlab="pc f1", ylab="pc f2",
xlim=lim_rotate, ylim=lim_rotate)
text(L_rotate[,1], L_rotate[, 2], labels=rownames(L_rotate), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
arrows(0,0, L_rotate[,1], L_rotate[, 2], col=2, code=2, length=0.1)
# 총인구수의 경우 PCFA에서와 반대로 MLFA에서는 f1인자에 음의 영향을 준다.
# 또한 주택가격의 경우도 PCFA에서와 반대로 MLFA에서는 f2인자에 음의 영향을 주는 것을 알 수 있다.
# 나머지의 경우는 PCFA에서의 결과와 유사하다고 할 수 있다.
fml = mlfa$scores
round(fml, 3)
par(mfrow=c(1,2))
par(pty="s")
par(family="AppleGothic")
lim_fml = range(pretty(fml))
plot(fml[,1], fml[,2],main="Plot of ML Factor Scores : f1 and f2",  xlab="ml f1", ylab="ml f2",
xlim=lim_fml, ylim=lim_fml)
text(fml[,1], fml[, 2], labels=rownames(X), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
lim_rotate = range(pretty(fpc_rotate))
plot(fpc_rotate[,1], fpc_rotate[,2],main="Plot of PC Factor Scores : f1 and f2",  xlab="pc f1", ylab="pc f2",
xlim=lim_rotate, ylim=lim_rotate)
text(fpc_rotate[,1], fpc_rotate[,2], labels=rownames(X), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
# 앞서 f1인자와 f2인자에 대해 PCFA와 MLFA의 결과에서 다른 결과를 보여준것이 총인구수와 주택가격이므로,
# 그들이 뻗어나간 방향의 차이가 있었던 1,2,4 분면에서는 조금 상이한 결과를 알 수 있다. (1사분면의 지역이 2사분면으로 간다던지 등의 차이가 있다.)
# 하지만 그들이 뻗어나간 방향의 차이가 없었던 3사분면의 경우에는 두 결과의 차이가 다른 사분면에 비해서 덜함을 알 수 있다.
par(pty="s")
par(mfrow=c(1,2))
plot(fml[,1], fpc_rotate[,1], main="Factor Scores : ml f1 and pc f1", xlab="ml f1", ylab="pc f1",
xlim=lim_fml, ylim=lim_rotate)
text(fml[,1], fpc_rotate[,1], labels=rownames(X), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
plot(fml[,2], fpc_rotate[,2], main="Factor Scores : ml f2 and pc f2", xlab="ml f2", ylab="pc f2",
xlim=lim_fml, ylim=lim_rotate)
text(fml[,2], fpc_rotate[,2], labels=rownames(X), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
# MLFA와 PCFA의 인자점수그림 쌍에서도 차이가 남을 알 수 있다.
### Q5) 인자행렬도를 통해 인자와 개체 간의 연관성을 살펴보라.
Lt = pcfa_rotate$loadings[, 1:2]
Ft = pcfa_rotate$scores
lim1 = range(pretty(Lt))
lim2 = range(pretty(Ft))
par(mfrow=c(1,1))
biplot(Ft, Lt, xlab="f1", ylab="f2", main="Rotated Biplot", xlim=lim2, ylim=lim2, cex=0.8, pch=16)
abline(v=0, h=0)
# PCFA를 통한 인자행렬도 그림을 보고 판단했을때, 1사분면에 랭크된 지역들(23, 57, 58 등등)은 주택가격, 총인구수, 종업율에 영향을 받고 그들이 유사한 지역들의 군집을 이루고 있다.
# 2사분면의 경우에는 전문가비율과 공무원 비율에대해 4사분면과 반대 부호로 영향을 받는 지역들이 군집을 이루고 있다.
# 3사분면의 경우에도 마찬가지로 1사분면과 반대 부호의 영향을 받는 지역들이 군집을 이루고 있다.
# 4사분면의 경우에는 전문가비율과 공무원 비율에 연관이 큰 개체들이 군집을 이루고 있을 것이다.
svd.Z <- svd(Z)
U <- svd.Z$u
V <- svd.Z$v
D <- diag(svd.Z$d)
F <- (sqrt(n-1)*U)[,1:2]  # Factor Scores Matrix : F
L <- (sqrt(1/(n-1))*V%*%D)[,1:2] # Factor Loadings Matrix : Lambda
varimax<-varimax(L)
Lt = varimax$loadings
T=varimax$rotmat
T
Ft= F%*%T
biplot(Ft,Lt, xlab="f1",ylab="f2", main="(b) Varimax Rotated Biplot",
xlim=lim2,ylim=lim2,cex=0.8,pch=16)
abline(v=0,h=0)
L
Lt
### Q5) 인자행렬도를 통해 인자와 개체 간의 연관성을 살펴보라.
Lt = pcfa_rotate$loadings[, 1:2]
Lt
pcfa_rotate
n=nrow(X)
svd.Z <- svd(Z)
U <- svd.Z$u
V <- svd.Z$v
D <- diag(svd.Z$d)
F <- (sqrt(n-1)*U)[,1:2]  # Factor Scores Matrix : F
L <- (sqrt(1/(n-1))*V%*%D)[,1:2] # Factor Loadings Matrix : Lambda
varimax<-varimax(L)
Lt = varimax$loadings
T=varimax$rotmat
Ft= F %*% T
biplot(Ft,Lt, xlab="f1",ylab="f2", main="(b) Varimax Rotated Biplot",
xlim=lim2,ylim=lim2,cex=0.8,pch=16)
abline(v=0,h=0)
Lt
### Q5) 인자행렬도를 통해 인자와 개체 간의 연관성을 살펴보라.
Lt = pcfa_rotate$loadings[, 1:2]
Lt
Ft
Ft = pcfa_rotate$scores
Ft
Ft= F %*% T
Ft
Lt = pcfa_rotate$loadings[, 1:2]
Ft = pcfa_rotate$scores
lim1 = range(pretty(Lt))
lim2 = range(pretty(Ft))
par(mfrow=c(1,1))
biplot(Ft, Lt, xlab="f1", ylab="f2", main="Rotated Biplot", xlim=lim2, ylim=lim2, cex=0.8, pch=16)
abline(v=0, h=0)
par(mfrow=c(1, 2))
# 인자점수그림
lim_rotate = range(pretty(fpc_rotate))
plot(fpc_rotate[,1], fpc_rotate[,2],main="Factor Scores : f1 and f2",  xlab="f1", ylab="f2",
xlim=lim_rotate, ylim=lim_rotate)
text(fpc_rotate[,1], fpc_rotate[,2], labels=rownames(X), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
lim_rotate = range(pretty(L_rotate))
par(family="AppleGothic")
plot(L_rotate[,1], L_rotate[,2],main="Plot of Factor Loadings(f1 & f2) : varimax ",  xlab="f1", ylab="f2",
xlim=lim_rotate, ylim=lim_rotate)
text(L_rotate[,1], L_rotate[, 2], labels=rownames(L_rotate), cex=0.8, col="blue", pos=1)
abline(v=0, h=0)
arrows(0,0, L_rotate[,1], L_rotate[, 2], col=2, code=2, length=0.1)
X[45:50, ]
### Q5) 인자행렬도를 통해 인자와 개체 간의 연관성을 살펴보라.
Lt = pcfa_rotate$loadings[, 1:2]
Ft = pcfa_rotate$scores
lim1 = range(pretty(Lt))
lim2 = range(pretty(Ft))
par(mfrow=c(1,1))
biplot(Ft, Lt, xlab="f1", ylab="f2", main="Rotated Biplot", xlim=lim2, ylim=lim2, cex=0.8, pch=16)
abline(v=0, h=0)
